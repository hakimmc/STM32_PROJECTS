
CAN_RECEIVER_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051bc  080051bc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080051bc  080051bc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051bc  080051bc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080051c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac4  20000018  080051dc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001adc  080051dc  00021adc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001787a  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ed  00000000  00000000  000378bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000362b  00000000  00000000  0003d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015631  00000000  00000000  0004071b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094744  00000000  00000000  00055d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea490  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005554  00000000  00000000  000ea4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005100 	.word	0x08005100

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005100 	.word	0x08005100

08000150 <main>:
	}_CAN_ID_UNION;
}CAN_FRAMES;


int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  HAL_Init();
 8000154:	f000 fc02 	bl	800095c <HAL_Init>
  SystemClock_Config();
 8000158:	f000 f892 	bl	8000280 <SystemClock_Config>
  MX_GPIO_Init();
 800015c:	f000 f936 	bl	80003cc <MX_GPIO_Init>
  MX_CAN_Init();
 8000160:	f000 f8d4 	bl	800030c <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f908 	bl	8000378 <MX_USART2_UART_Init>
  HAL_CAN_Start(&hcan);
 8000168:	480c      	ldr	r0, [pc, #48]	; (800019c <main+0x4c>)
 800016a:	f000 fe11 	bl	8000d90 <HAL_CAN_Start>
  CAN_PARAMS_INIT();
 800016e:	f000 f9cd 	bl	800050c <CAN_PARAMS_INIT>
  osKernelInitialize();
 8000172:	f002 fb19 	bl	80027a8 <osKernelInitialize>
  /*MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/
  CAN_TASKHandle = osThreadNew(StartCanTask, NULL, &CAN_TASK_attributes);
 8000176:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <main+0x50>)
 8000178:	2100      	movs	r1, #0
 800017a:	480a      	ldr	r0, [pc, #40]	; (80001a4 <main+0x54>)
 800017c:	f002 fb7a 	bl	8002874 <osThreadNew>
 8000180:	4603      	mov	r3, r0
 8000182:	4a09      	ldr	r2, [pc, #36]	; (80001a8 <main+0x58>)
 8000184:	6013      	str	r3, [r2, #0]
  /*WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW*/
  UART_TASKHandle = osThreadNew(StartUartTask, NULL, &UART_TASK_attributes);
 8000186:	4a09      	ldr	r2, [pc, #36]	; (80001ac <main+0x5c>)
 8000188:	2100      	movs	r1, #0
 800018a:	4809      	ldr	r0, [pc, #36]	; (80001b0 <main+0x60>)
 800018c:	f002 fb72 	bl	8002874 <osThreadNew>
 8000190:	4603      	mov	r3, r0
 8000192:	4a08      	ldr	r2, [pc, #32]	; (80001b4 <main+0x64>)
 8000194:	6013      	str	r3, [r2, #0]
  /*MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/
  osKernelStart();
 8000196:	f002 fb39 	bl	800280c <osKernelStart>
  while (1)
 800019a:	e7fe      	b.n	800019a <main+0x4a>
 800019c:	20000034 	.word	0x20000034
 80001a0:	08005148 	.word	0x08005148
 80001a4:	080001b9 	.word	0x080001b9
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	0800516c 	.word	0x0800516c
 80001b0:	08000225 	.word	0x08000225
 80001b4:	200000a8 	.word	0x200000a8

080001b8 <StartCanTask>:
     * */
  }
}

void StartCanTask(void *argument)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b084      	sub	sp, #16
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  if(!(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, RxData))){
 80001c0:	4b10      	ldr	r3, [pc, #64]	; (8000204 <StartCanTask+0x4c>)
 80001c2:	4a11      	ldr	r2, [pc, #68]	; (8000208 <StartCanTask+0x50>)
 80001c4:	2100      	movs	r1, #0
 80001c6:	4811      	ldr	r0, [pc, #68]	; (800020c <StartCanTask+0x54>)
 80001c8:	f000 fef5 	bl	8000fb6 <HAL_CAN_GetRxMessage>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d1f6      	bne.n	80001c0 <StartCanTask+0x8>
		  CAN_FRAMES._CAN_ID_UNION.CAN_ID=pRxHeader.StdId;
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <StartCanTask+0x50>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <StartCanTask+0x58>)
 80001da:	601a      	str	r2, [r3, #0]
	  	  receive_flag=1;
 80001dc:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <StartCanTask+0x5c>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
	  	  uint8_t feedback[1];feedback[0]=pRxHeader.StdId;
 80001e2:	4b09      	ldr	r3, [pc, #36]	; (8000208 <StartCanTask+0x50>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	733b      	strb	r3, [r7, #12]
	  	  HAL_CAN_AddTxMessage(&hcan, &pTxHeader, feedback, &pTxMailbox);
 80001ea:	f107 020c 	add.w	r2, r7, #12
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <StartCanTask+0x60>)
 80001f0:	490a      	ldr	r1, [pc, #40]	; (800021c <StartCanTask+0x64>)
 80001f2:	4806      	ldr	r0, [pc, #24]	; (800020c <StartCanTask+0x54>)
 80001f4:	f000 fe10 	bl	8000e18 <HAL_CAN_AddTxMessage>
	  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <StartCanTask+0x68>)
 80001fe:	f001 fa6f 	bl	80016e0 <HAL_GPIO_TogglePin>
	  if(!(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, RxData))){
 8000202:	e7dd      	b.n	80001c0 <StartCanTask+0x8>
 8000204:	20000120 	.word	0x20000120
 8000208:	200000d8 	.word	0x200000d8
 800020c:	20000034 	.word	0x20000034
 8000210:	20000144 	.word	0x20000144
 8000214:	200000ac 	.word	0x200000ac
 8000218:	2000011c 	.word	0x2000011c
 800021c:	200000c0 	.word	0x200000c0
 8000220:	40011000 	.word	0x40011000

08000224 <StartUartTask>:
	  }
  }
}

void StartUartTask(void *argument)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	if(receive_flag){
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <StartUartTask+0x48>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2b00      	cmp	r3, #0
 8000234:	d014      	beq.n	8000260 <StartUartTask+0x3c>
		//int Check_Sum = CheckSum(Calculate_SummOfByte(pRxHeader.DLC));
		PREPARE_UARTS_DATA();
 8000236:	f000 f915 	bl	8000464 <PREPARE_UARTS_DATA>
		HAL_UART_Transmit(&huart2, uart_data,(uint16_t)(1+1+4+1+(int)(pRxHeader.DLC)+1) , 1000);
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <StartUartTask+0x4c>)
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	b29b      	uxth	r3, r3
 8000240:	3308      	adds	r3, #8
 8000242:	b29a      	uxth	r2, r3
 8000244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000248:	490a      	ldr	r1, [pc, #40]	; (8000274 <StartUartTask+0x50>)
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <StartUartTask+0x54>)
 800024c:	f002 f92c 	bl	80024a8 <HAL_UART_Transmit>
		receive_flag=0;
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <StartUartTask+0x48>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025a:	4808      	ldr	r0, [pc, #32]	; (800027c <StartUartTask+0x58>)
 800025c:	f001 fa40 	bl	80016e0 <HAL_GPIO_TogglePin>
	}
	else{
		//HAL_UART_Transmit(&huart2, (uint8_t*)"ff", sizeof("ff"), 100);
	}
	HAL_Delay(1000);
 8000260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000264:	f000 fbac 	bl	80009c0 <HAL_Delay>
	if(receive_flag){
 8000268:	e7e0      	b.n	800022c <StartUartTask+0x8>
 800026a:	bf00      	nop
 800026c:	200000ac 	.word	0x200000ac
 8000270:	200000d8 	.word	0x200000d8
 8000274:	20000128 	.word	0x20000128
 8000278:	2000005c 	.word	0x2000005c
 800027c:	40011000 	.word	0x40011000

08000280 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f004 ff2e 	bl	80050f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 fa23 	bl	8001714 <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d4:	f000 f9b0 	bl	8000638 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	2302      	movs	r3, #2
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fc90 	bl	8001c18 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fe:	f000 f99b 	bl	8000638 <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3740      	adds	r7, #64	; 0x40
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_CAN_Init>:

static void MX_CAN_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  hcan.Instance = CAN1;
 8000310:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MX_CAN_Init+0x64>)
 8000312:	4a18      	ldr	r2, [pc, #96]	; (8000374 <MX_CAN_Init+0x68>)
 8000314:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <MX_CAN_Init+0x64>)
 8000318:	2204      	movs	r2, #4
 800031a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_CAN_Init+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000322:	4b13      	ldr	r3, [pc, #76]	; (8000370 <MX_CAN_Init+0x64>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_CAN_Init+0x64>)
 800032a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800032e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_CAN_Init+0x64>)
 8000332:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000336:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <MX_CAN_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_CAN_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <MX_CAN_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_CAN_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <MX_CAN_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_CAN_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <MX_CAN_Init+0x64>)
 800035e:	f000 fb53 	bl	8000a08 <HAL_CAN_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000368:	f000 f966 	bl	8000638 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000034 	.word	0x20000034
 8000374:	40006400 	.word	0x40006400

08000378 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <MX_USART2_UART_Init+0x50>)
 8000380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003b0:	f002 f82a 	bl	8002408 <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003ba:	f000 f93d 	bl	8000638 <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000005c 	.word	0x2000005c
 80003c8:	40004400 	.word	0x40004400

080003cc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a1d      	ldr	r2, [pc, #116]	; (800045c <MX_GPIO_Init+0x90>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0310 	and.w	r3, r3, #16
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_GPIO_Init+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a17      	ldr	r2, [pc, #92]	; (800045c <MX_GPIO_Init+0x90>)
 80003fe:	f043 0320 	orr.w	r3, r3, #32
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_GPIO_Init+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0320 	and.w	r3, r3, #32
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_GPIO_Init+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a11      	ldr	r2, [pc, #68]	; (800045c <MX_GPIO_Init+0x90>)
 8000416:	f043 0304 	orr.w	r3, r3, #4
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_GPIO_Init+0x90>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042e:	480c      	ldr	r0, [pc, #48]	; (8000460 <MX_GPIO_Init+0x94>)
 8000430:	f001 f93e 	bl	80016b0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2302      	movs	r3, #2
 8000444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_GPIO_Init+0x94>)
 800044e:	f000 ffb3 	bl	80013b8 <HAL_GPIO_Init>
}
 8000452:	bf00      	nop
 8000454:	3720      	adds	r7, #32
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40011000 	.word	0x40011000

08000464 <PREPARE_UARTS_DATA>:

void PREPARE_UARTS_DATA(){
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
	/*sprintf(uart_data,"0x%x 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x",0xDD,0x0C,CAN_FRAMES._CAN_ID_UNION._CAN_ID_BYTES.BYTE1,CAN_FRAMES._CAN_ID_UNION._CAN_ID_BYTES.BYTE2,CAN_FRAMES._CAN_ID_UNION._CAN_ID_BYTES.BYTE3,CAN_FRAMES._CAN_ID_UNION._CAN_ID_BYTES.BYTE4,__DLC);
	for(int i=0;i<pRxHeader.DLC;i++){
		strcat(uart_data,"0x%x",RxData[i]);
	}
	strcat(uart_data,"0x%x",CheckSum(Calculate_SummOfByte(pRxHeader.DLC)));*/
	uart_data[0]=0xDD;
 800046a:	4b24      	ldr	r3, [pc, #144]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 800046c:	22dd      	movs	r2, #221	; 0xdd
 800046e:	701a      	strb	r2, [r3, #0]
	uart_data[1]=(uint8_t)(1+1+4+1+(uint8_t)(pRxHeader.DLC)+1);
 8000470:	4b23      	ldr	r3, [pc, #140]	; (8000500 <PREPARE_UARTS_DATA+0x9c>)
 8000472:	691b      	ldr	r3, [r3, #16]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	3308      	adds	r3, #8
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b20      	ldr	r3, [pc, #128]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 800047c:	705a      	strb	r2, [r3, #1]
	uart_data[2]=(uint8_t)(CAN_FRAMES._CAN_ID_UNION._CAN_ID_BYTES.BYTE1);
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <PREPARE_UARTS_DATA+0xa0>)
 8000480:	78da      	ldrb	r2, [r3, #3]
 8000482:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 8000484:	709a      	strb	r2, [r3, #2]
	uart_data[3]=(uint8_t)(CAN_FRAMES._CAN_ID_UNION._CAN_ID_BYTES.BYTE2);
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <PREPARE_UARTS_DATA+0xa0>)
 8000488:	789a      	ldrb	r2, [r3, #2]
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 800048c:	70da      	strb	r2, [r3, #3]
	uart_data[4]=(uint8_t)(CAN_FRAMES._CAN_ID_UNION._CAN_ID_BYTES.BYTE3);
 800048e:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <PREPARE_UARTS_DATA+0xa0>)
 8000490:	785a      	ldrb	r2, [r3, #1]
 8000492:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 8000494:	711a      	strb	r2, [r3, #4]
	uart_data[5]=(uint8_t)(CAN_FRAMES._CAN_ID_UNION._CAN_ID_BYTES.BYTE4);
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <PREPARE_UARTS_DATA+0xa0>)
 8000498:	781a      	ldrb	r2, [r3, #0]
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 800049c:	715a      	strb	r2, [r3, #5]
	uart_data[6]=(uint8_t)(pRxHeader.DLC);
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <PREPARE_UARTS_DATA+0x9c>)
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	b2da      	uxtb	r2, r3
 80004a4:	4b15      	ldr	r3, [pc, #84]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 80004a6:	719a      	strb	r2, [r3, #6]
	for(int i=0;i<pRxHeader.DLC;i++){
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	e00a      	b.n	80004c4 <PREPARE_UARTS_DATA+0x60>
		uart_data[7+i]=RxData[i];
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3307      	adds	r3, #7
 80004b2:	4915      	ldr	r1, [pc, #84]	; (8000508 <PREPARE_UARTS_DATA+0xa4>)
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	440a      	add	r2, r1
 80004b8:	7811      	ldrb	r1, [r2, #0]
 80004ba:	4a10      	ldr	r2, [pc, #64]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 80004bc:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<pRxHeader.DLC;i++){
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3301      	adds	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <PREPARE_UARTS_DATA+0x9c>)
 80004c6:	691a      	ldr	r2, [r3, #16]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d8ef      	bhi.n	80004ae <PREPARE_UARTS_DATA+0x4a>
	}
	uart_data[(uint8_t)(pRxHeader.DLC)+7]=CheckSum(Calculate_SummOfByte((uint8_t)(pRxHeader.DLC)));
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <PREPARE_UARTS_DATA+0x9c>)
 80004d0:	691b      	ldr	r3, [r3, #16]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f873 	bl	80005c0 <Calculate_SummOfByte>
 80004da:	4603      	mov	r3, r0
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f891 	bl	8000604 <CheckSum>
 80004e2:	4602      	mov	r2, r0
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <PREPARE_UARTS_DATA+0x9c>)
 80004e6:	691b      	ldr	r3, [r3, #16]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	3307      	adds	r3, #7
 80004ec:	b2d1      	uxtb	r1, r2
 80004ee:	4a03      	ldr	r2, [pc, #12]	; (80004fc <PREPARE_UARTS_DATA+0x98>)
 80004f0:	54d1      	strb	r1, [r2, r3]
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000128 	.word	0x20000128
 8000500:	200000d8 	.word	0x200000d8
 8000504:	20000144 	.word	0x20000144
 8000508:	20000120 	.word	0x20000120

0800050c <CAN_PARAMS_INIT>:
void CAN_PARAMS_INIT(){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	pTxHeader.DLC = __DLC;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <CAN_PARAMS_INIT+0x6c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a19      	ldr	r2, [pc, #100]	; (800057c <CAN_PARAMS_INIT+0x70>)
 8000516:	6113      	str	r3, [r2, #16]
	pTxHeader.IDE = CAN_ID_STD;
 8000518:	4b18      	ldr	r3, [pc, #96]	; (800057c <CAN_PARAMS_INIT+0x70>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
	pTxHeader.RTR = CAN_RTR_DATA;
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <CAN_PARAMS_INIT+0x70>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
	pTxHeader.StdId = __STD_ID;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <CAN_PARAMS_INIT+0x74>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <CAN_PARAMS_INIT+0x70>)
 800052a:	6013      	str	r3, [r2, #0]

	//set filter parameters
	sFilterConfig.FilterActivation = ENABLE;
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 800052e:	2201      	movs	r2, #1
 8000530:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterBank = 0;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = __FILTER_ID_HIGH ;
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <CAN_PARAMS_INIT+0x7c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a10      	ldr	r2, [pc, #64]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 8000544:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = __FILTER_ID_LOW ;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <CAN_PARAMS_INIT+0x80>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 800054c:	6053      	str	r3, [r2, #4]
	sFilterConfig.FilterMaskIdHigh = __FILTER_MASK_ID_HIGH ;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <CAN_PARAMS_INIT+0x84>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 8000554:	6093      	str	r3, [r2, #8]
	sFilterConfig.FilterMaskIdLow = __FILTER_MASK_ID_LOW ;
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <CAN_PARAMS_INIT+0x88>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 800055c:	60d3      	str	r3, [r2, #12]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 8000560:	2200      	movs	r2, #0
 8000562:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000564:	4b07      	ldr	r3, [pc, #28]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 8000566:	2201      	movs	r2, #1
 8000568:	61da      	str	r2, [r3, #28]

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800056a:	4906      	ldr	r1, [pc, #24]	; (8000584 <CAN_PARAMS_INIT+0x78>)
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <CAN_PARAMS_INIT+0x8c>)
 800056e:	f000 fb46 	bl	8000bfe <HAL_CAN_ConfigFilter>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000000 	.word	0x20000000
 800057c:	200000c0 	.word	0x200000c0
 8000580:	20000004 	.word	0x20000004
 8000584:	200000f4 	.word	0x200000f4
 8000588:	200000b0 	.word	0x200000b0
 800058c:	200000b4 	.word	0x200000b4
 8000590:	200000b8 	.word	0x200000b8
 8000594:	200000bc 	.word	0x200000bc
 8000598:	20000034 	.word	0x20000034

0800059c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d101      	bne.n	80005b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ae:	f000 f9eb 	bl	8000988 <HAL_IncTick>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40012c00 	.word	0x40012c00

080005c0 <Calculate_SummOfByte>:
int Calculate_SummOfByte(uint8_t dlc_number){
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	int summ;
	for(int i=0;i<__DLC;i++){
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	e00a      	b.n	80005e6 <Calculate_SummOfByte+0x26>
		summ+=RxData[i];
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <Calculate_SummOfByte+0x3c>)
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4413      	add	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<__DLC;i++){
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	3301      	adds	r3, #1
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <Calculate_SummOfByte+0x40>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d3ef      	bcc.n	80005d0 <Calculate_SummOfByte+0x10>
	}
	return summ;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	20000120 	.word	0x20000120
 8000600:	20000000 	.word	0x20000000

08000604 <CheckSum>:
int CheckSum(int summofbyte){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	return 0xFF-(summofbyte%0xFF);
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <CheckSum+0x30>)
 8000610:	fb83 1302 	smull	r1, r3, r3, r2
 8000614:	4413      	add	r3, r2
 8000616:	11d9      	asrs	r1, r3, #7
 8000618:	17d3      	asrs	r3, r2, #31
 800061a:	1ac9      	subs	r1, r1, r3
 800061c:	460b      	mov	r3, r1
 800061e:	021b      	lsls	r3, r3, #8
 8000620:	1a5b      	subs	r3, r3, r1
 8000622:	1ad1      	subs	r1, r2, r3
 8000624:	f1c1 03ff 	rsb	r3, r1, #255	; 0xff
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	80808081 	.word	0x80808081

08000638 <Error_Handler>:

void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <HAL_MspInit+0x68>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <HAL_MspInit+0x68>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_MspInit+0x68>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_MspInit+0x68>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <HAL_MspInit+0x68>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_MspInit+0x68>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	210f      	movs	r1, #15
 800067e:	f06f 0001 	mvn.w	r0, #1
 8000682:	f000 fe6e 	bl	8001362 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_MspInit+0x6c>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_MspInit+0x6c>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010000 	.word	0x40010000

080006b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <HAL_CAN_MspInit+0x8c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d131      	bne.n	8000738 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <HAL_CAN_MspInit+0x90>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	4a1a      	ldr	r2, [pc, #104]	; (8000744 <HAL_CAN_MspInit+0x90>)
 80006da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006de:	61d3      	str	r3, [r2, #28]
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_CAN_MspInit+0x90>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_CAN_MspInit+0x90>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_CAN_MspInit+0x90>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_CAN_MspInit+0x90>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000704:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <HAL_CAN_MspInit+0x94>)
 800071a:	f000 fe4d 	bl	80013b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <HAL_CAN_MspInit+0x94>)
 8000734:	f000 fe40 	bl	80013b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40006400 	.word	0x40006400
 8000744:	40021000 	.word	0x40021000
 8000748:	40010800 	.word	0x40010800

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d12f      	bne.n	80007cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 8000772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000776:	61d3      	str	r3, [r2, #28]
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 800078a:	f043 0304 	orr.w	r3, r3, #4
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800079c:	2304      	movs	r3, #4
 800079e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <HAL_UART_MspInit+0x90>)
 80007b0:	f000 fe02 	bl	80013b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007b4:	2308      	movs	r3, #8
 80007b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_UART_MspInit+0x90>)
 80007c8:	f000 fdf6 	bl	80013b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40004400 	.word	0x40004400
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010800 	.word	0x40010800

080007e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <HAL_InitTick+0xd0>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a2d      	ldr	r2, [pc, #180]	; (80008b0 <HAL_InitTick+0xd0>)
 80007fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <HAL_InitTick+0xd0>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800080e:	f107 020c 	add.w	r2, r7, #12
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fb6d 	bl	8001ef8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800081e:	f001 fb57 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8000822:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <HAL_InitTick+0xd4>)
 8000828:	fba2 2303 	umull	r2, r3, r2, r3
 800082c:	0c9b      	lsrs	r3, r3, #18
 800082e:	3b01      	subs	r3, #1
 8000830:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <HAL_InitTick+0xd8>)
 8000834:	4a21      	ldr	r2, [pc, #132]	; (80008bc <HAL_InitTick+0xdc>)
 8000836:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <HAL_InitTick+0xd8>)
 800083a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800083e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <HAL_InitTick+0xd8>)
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_InitTick+0xd8>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_InitTick+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_InitTick+0xd8>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000858:	4817      	ldr	r0, [pc, #92]	; (80008b8 <HAL_InitTick+0xd8>)
 800085a:	f001 fb9b 	bl	8001f94 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000868:	2b00      	cmp	r3, #0
 800086a:	d11b      	bne.n	80008a4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <HAL_InitTick+0xd8>)
 800086e:	f001 fbe9 	bl	8002044 <HAL_TIM_Base_Start_IT>
 8000872:	4603      	mov	r3, r0
 8000874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800087c:	2b00      	cmp	r3, #0
 800087e:	d111      	bne.n	80008a4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000880:	2019      	movs	r0, #25
 8000882:	f000 fd8a 	bl	800139a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d808      	bhi.n	800089e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	2019      	movs	r0, #25
 8000892:	f000 fd66 	bl	8001362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_InitTick+0xe0>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	e002      	b.n	80008a4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3730      	adds	r7, #48	; 0x30
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	431bde83 	.word	0x431bde83
 80008b8:	20000148 	.word	0x20000148
 80008bc:	40012c00 	.word	0x40012c00
 80008c0:	2000000c 	.word	0x2000000c

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
	...

080008f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <TIM1_UP_IRQHandler+0x10>)
 80008f6:	f001 fbf1 	bl	80020dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000148 	.word	0x20000148

08000904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000910:	f7ff fff8 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000916:	490c      	ldr	r1, [pc, #48]	; (8000948 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000918:	4a0c      	ldr	r2, [pc, #48]	; (800094c <LoopFillZerobss+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a09      	ldr	r2, [pc, #36]	; (8000950 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800092c:	4c09      	ldr	r4, [pc, #36]	; (8000954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093a:	f004 fba7 	bl	800508c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093e:	f7ff fc07 	bl	8000150 <main>
  bx lr
 8000942:	4770      	bx	lr
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800094c:	080051c4 	.word	0x080051c4
  ldr r2, =_sbss
 8000950:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000954:	20001adc 	.word	0x20001adc

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_Init+0x28>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_Init+0x28>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 fced 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	200f      	movs	r0, #15
 8000974:	f7ff ff34 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff fe64 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40022000 	.word	0x40022000

08000988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_IncTick+0x1c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_IncTick+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <HAL_IncTick+0x20>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	20000010 	.word	0x20000010
 80009a8:	20000190 	.word	0x20000190

080009ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <HAL_GetTick+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	20000190 	.word	0x20000190

080009c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff fff0 	bl	80009ac <HAL_GetTick>
 80009cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d005      	beq.n	80009e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_Delay+0x44>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e6:	bf00      	nop
 80009e8:	f7ff ffe0 	bl	80009ac <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8f7      	bhi.n	80009e8 <HAL_Delay+0x28>
  {
  }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000010 	.word	0x20000010

08000a08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e0ed      	b.n	8000bf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fe44 	bl	80006b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a3c:	f7ff ffb6 	bl	80009ac <HAL_GetTick>
 8000a40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a42:	e012      	b.n	8000a6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a44:	f7ff ffb2 	bl	80009ac <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b0a      	cmp	r3, #10
 8000a50:	d90b      	bls.n	8000a6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2205      	movs	r2, #5
 8000a62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e0c5      	b.n	8000bf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0e5      	beq.n	8000a44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f022 0202 	bic.w	r2, r2, #2
 8000a86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a88:	f7ff ff90 	bl	80009ac <HAL_GetTick>
 8000a8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a8e:	e012      	b.n	8000ab6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a90:	f7ff ff8c 	bl	80009ac <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	2b0a      	cmp	r3, #10
 8000a9c:	d90b      	bls.n	8000ab6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2205      	movs	r2, #5
 8000aae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e09f      	b.n	8000bf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e5      	bne.n	8000a90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7e1b      	ldrb	r3, [r3, #24]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d108      	bne.n	8000ade <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	e007      	b.n	8000aee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7e5b      	ldrb	r3, [r3, #25]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d108      	bne.n	8000b08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	e007      	b.n	8000b18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7e9b      	ldrb	r3, [r3, #26]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d108      	bne.n	8000b32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0220 	orr.w	r2, r2, #32
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e007      	b.n	8000b42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f022 0220 	bic.w	r2, r2, #32
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7edb      	ldrb	r3, [r3, #27]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d108      	bne.n	8000b5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0210 	bic.w	r2, r2, #16
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	e007      	b.n	8000b6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 0210 	orr.w	r2, r2, #16
 8000b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7f1b      	ldrb	r3, [r3, #28]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0208 	orr.w	r2, r2, #8
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e007      	b.n	8000b96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0208 	bic.w	r2, r2, #8
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7f5b      	ldrb	r3, [r3, #29]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d108      	bne.n	8000bb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f042 0204 	orr.w	r2, r2, #4
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e007      	b.n	8000bc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0204 	bic.w	r2, r2, #4
 8000bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	ea42 0103 	orr.w	r1, r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	430a      	orrs	r2, r1
 8000be4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b087      	sub	sp, #28
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c16:	7cfb      	ldrb	r3, [r7, #19]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d003      	beq.n	8000c24 <HAL_CAN_ConfigFilter+0x26>
 8000c1c:	7cfb      	ldrb	r3, [r7, #19]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	f040 80aa 	bne.w	8000d78 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c2a:	f043 0201 	orr.w	r2, r3, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	f003 031f 	and.w	r3, r3, #31
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d123      	bne.n	8000ca6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	401a      	ands	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3248      	adds	r2, #72	; 0x48
 8000c86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c9c:	6979      	ldr	r1, [r7, #20]
 8000c9e:	3348      	adds	r3, #72	; 0x48
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	440b      	add	r3, r1
 8000ca4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d122      	bne.n	8000cf4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3248      	adds	r2, #72	; 0x48
 8000cd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ce8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cea:	6979      	ldr	r1, [r7, #20]
 8000cec:	3348      	adds	r3, #72	; 0x48
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d0e:	e007      	b.n	8000d20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000d3a:	e007      	b.n	8000d4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d107      	bne.n	8000d64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d6a:	f023 0201 	bic.w	r2, r3, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e006      	b.n	8000d86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
  }
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d12e      	bne.n	8000e02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2202      	movs	r2, #2
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0201 	bic.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000dbc:	f7ff fdf6 	bl	80009ac <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dc2:	e012      	b.n	8000dea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc4:	f7ff fdf2 	bl	80009ac <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b0a      	cmp	r3, #10
 8000dd0:	d90b      	bls.n	8000dea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2205      	movs	r2, #5
 8000de2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e012      	b.n	8000e10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1e5      	bne.n	8000dc4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e006      	b.n	8000e10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
  }
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e36:	7ffb      	ldrb	r3, [r7, #31]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d003      	beq.n	8000e44 <HAL_CAN_AddTxMessage+0x2c>
 8000e3c:	7ffb      	ldrb	r3, [r7, #31]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	f040 80ad 	bne.w	8000f9e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10a      	bne.n	8000e64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8095 	beq.w	8000f8e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	0e1b      	lsrs	r3, r3, #24
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10d      	bne.n	8000e9c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	6809      	ldr	r1, [r1, #0]
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3318      	adds	r3, #24
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	440b      	add	r3, r1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e00f      	b.n	8000ebc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ea6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000eb0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	440b      	add	r3, r1
 8000eba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3318      	adds	r3, #24
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	440b      	add	r3, r1
 8000ecc:	3304      	adds	r3, #4
 8000ece:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	7d1b      	ldrb	r3, [r3, #20]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d111      	bne.n	8000efc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3318      	adds	r3, #24
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	6811      	ldr	r1, [r2, #0]
 8000eec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3304      	adds	r3, #4
 8000efa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3307      	adds	r3, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	061a      	lsls	r2, r3, #24
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3306      	adds	r3, #6
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	041b      	lsls	r3, r3, #16
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3305      	adds	r3, #5
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	4313      	orrs	r3, r2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	3204      	adds	r2, #4
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	4610      	mov	r0, r2
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	ea43 0200 	orr.w	r2, r3, r0
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	440b      	add	r3, r1
 8000f2e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3303      	adds	r3, #3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	061a      	lsls	r2, r3, #24
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4610      	mov	r0, r2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	6811      	ldr	r1, [r2, #0]
 8000f5a:	ea43 0200 	orr.w	r2, r3, r0
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	440b      	add	r3, r1
 8000f64:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	4413      	add	r3, r2
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	6811      	ldr	r1, [r2, #0]
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3318      	adds	r3, #24
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e00e      	b.n	8000fac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e006      	b.n	8000fac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
  }
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3724      	adds	r7, #36	; 0x24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b087      	sub	sp, #28
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d003      	beq.n	8000fda <HAL_CAN_GetRxMessage+0x24>
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	f040 8103 	bne.w	80011e0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d116      	bne.n	800101c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0f7      	b.n	80011ee <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d107      	bne.n	800101c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0e8      	b.n	80011ee <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	331b      	adds	r3, #27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0204 	and.w	r2, r3, #4
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	331b      	adds	r3, #27
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4413      	add	r3, r2
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0d5b      	lsrs	r3, r3, #21
 800104a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e00b      	b.n	800106c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	331b      	adds	r3, #27
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	4413      	add	r3, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	08db      	lsrs	r3, r3, #3
 8001064:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	331b      	adds	r3, #27
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0202 	and.w	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	331b      	adds	r3, #27
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	4413      	add	r3, r2
 800108e:	3304      	adds	r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2208      	movs	r2, #8
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	e00b      	b.n	80010ba <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	331b      	adds	r3, #27
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4413      	add	r3, r2
 80010ae:	3304      	adds	r3, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 020f 	and.w	r2, r3, #15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	331b      	adds	r3, #27
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	4413      	add	r3, r2
 80010c6:	3304      	adds	r3, #4
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	331b      	adds	r3, #27
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	0c1b      	lsrs	r3, r3, #16
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	4413      	add	r3, r2
 80010f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0a1a      	lsrs	r2, r3, #8
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0c1a      	lsrs	r2, r3, #16
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3302      	adds	r3, #2
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0e1a      	lsrs	r2, r3, #24
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3303      	adds	r3, #3
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	3304      	adds	r3, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4413      	add	r3, r2
 8001170:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	0a1a      	lsrs	r2, r3, #8
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3305      	adds	r3, #5
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0c1a      	lsrs	r2, r3, #16
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3306      	adds	r3, #6
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0e1a      	lsrs	r2, r3, #24
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3307      	adds	r3, #7
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d108      	bne.n	80011cc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0220 	orr.w	r2, r2, #32
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	e007      	b.n	80011dc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0220 	orr.w	r2, r2, #32
 80011da:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	e006      	b.n	80011ee <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
  }
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4906      	ldr	r1, [pc, #24]	; (8001290 <__NVIC_EnableIRQ+0x34>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff4f 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff64 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ffb2 	bl	80012e8 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff81 	bl	8001294 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff57 	bl	800125c <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b08b      	sub	sp, #44	; 0x2c
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ca:	e161      	b.n	8001690 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013cc:	2201      	movs	r2, #1
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	f040 8150 	bne.w	800168a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a97      	ldr	r2, [pc, #604]	; (800164c <HAL_GPIO_Init+0x294>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d05e      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 80013f4:	4a95      	ldr	r2, [pc, #596]	; (800164c <HAL_GPIO_Init+0x294>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d875      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 80013fa:	4a95      	ldr	r2, [pc, #596]	; (8001650 <HAL_GPIO_Init+0x298>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d058      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 8001400:	4a93      	ldr	r2, [pc, #588]	; (8001650 <HAL_GPIO_Init+0x298>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d86f      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 8001406:	4a93      	ldr	r2, [pc, #588]	; (8001654 <HAL_GPIO_Init+0x29c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d052      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 800140c:	4a91      	ldr	r2, [pc, #580]	; (8001654 <HAL_GPIO_Init+0x29c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d869      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 8001412:	4a91      	ldr	r2, [pc, #580]	; (8001658 <HAL_GPIO_Init+0x2a0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d04c      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 8001418:	4a8f      	ldr	r2, [pc, #572]	; (8001658 <HAL_GPIO_Init+0x2a0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d863      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 800141e:	4a8f      	ldr	r2, [pc, #572]	; (800165c <HAL_GPIO_Init+0x2a4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d046      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
 8001424:	4a8d      	ldr	r2, [pc, #564]	; (800165c <HAL_GPIO_Init+0x2a4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d85d      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 800142a:	2b12      	cmp	r3, #18
 800142c:	d82a      	bhi.n	8001484 <HAL_GPIO_Init+0xcc>
 800142e:	2b12      	cmp	r3, #18
 8001430:	d859      	bhi.n	80014e6 <HAL_GPIO_Init+0x12e>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <HAL_GPIO_Init+0x80>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	080014b3 	.word	0x080014b3
 800143c:	0800148d 	.word	0x0800148d
 8001440:	0800149f 	.word	0x0800149f
 8001444:	080014e1 	.word	0x080014e1
 8001448:	080014e7 	.word	0x080014e7
 800144c:	080014e7 	.word	0x080014e7
 8001450:	080014e7 	.word	0x080014e7
 8001454:	080014e7 	.word	0x080014e7
 8001458:	080014e7 	.word	0x080014e7
 800145c:	080014e7 	.word	0x080014e7
 8001460:	080014e7 	.word	0x080014e7
 8001464:	080014e7 	.word	0x080014e7
 8001468:	080014e7 	.word	0x080014e7
 800146c:	080014e7 	.word	0x080014e7
 8001470:	080014e7 	.word	0x080014e7
 8001474:	080014e7 	.word	0x080014e7
 8001478:	080014e7 	.word	0x080014e7
 800147c:	08001495 	.word	0x08001495
 8001480:	080014a9 	.word	0x080014a9
 8001484:	4a76      	ldr	r2, [pc, #472]	; (8001660 <HAL_GPIO_Init+0x2a8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148a:	e02c      	b.n	80014e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e029      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	3304      	adds	r3, #4
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e024      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	3308      	adds	r3, #8
 80014a4:	623b      	str	r3, [r7, #32]
          break;
 80014a6:	e01f      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	330c      	adds	r3, #12
 80014ae:	623b      	str	r3, [r7, #32]
          break;
 80014b0:	e01a      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ba:	2304      	movs	r3, #4
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e013      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d105      	bne.n	80014d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c8:	2308      	movs	r3, #8
 80014ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	611a      	str	r2, [r3, #16]
          break;
 80014d2:	e009      	b.n	80014e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d4:	2308      	movs	r3, #8
 80014d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	615a      	str	r2, [r3, #20]
          break;
 80014de:	e003      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x130>
          break;
 80014e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2bff      	cmp	r3, #255	; 0xff
 80014ec:	d801      	bhi.n	80014f2 <HAL_GPIO_Init+0x13a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	e001      	b.n	80014f6 <HAL_GPIO_Init+0x13e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3304      	adds	r3, #4
 80014f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2bff      	cmp	r3, #255	; 0xff
 80014fc:	d802      	bhi.n	8001504 <HAL_GPIO_Init+0x14c>
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0x152>
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	3b08      	subs	r3, #8
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	210f      	movs	r1, #15
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	6a39      	ldr	r1, [r7, #32]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	431a      	orrs	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 80a9 	beq.w	800168a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001538:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <HAL_GPIO_Init+0x2ac>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_GPIO_Init+0x2ac>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_GPIO_Init+0x2ac>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001550:	4a45      	ldr	r2, [pc, #276]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a3d      	ldr	r2, [pc, #244]	; (800166c <HAL_GPIO_Init+0x2b4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00d      	beq.n	8001598 <HAL_GPIO_Init+0x1e0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a3c      	ldr	r2, [pc, #240]	; (8001670 <HAL_GPIO_Init+0x2b8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d007      	beq.n	8001594 <HAL_GPIO_Init+0x1dc>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a3b      	ldr	r2, [pc, #236]	; (8001674 <HAL_GPIO_Init+0x2bc>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_GPIO_Init+0x1d8>
 800158c:	2302      	movs	r3, #2
 800158e:	e004      	b.n	800159a <HAL_GPIO_Init+0x1e2>
 8001590:	2303      	movs	r3, #3
 8001592:	e002      	b.n	800159a <HAL_GPIO_Init+0x1e2>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <HAL_GPIO_Init+0x1e2>
 8001598:	2300      	movs	r3, #0
 800159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159c:	f002 0203 	and.w	r2, r2, #3
 80015a0:	0092      	lsls	r2, r2, #2
 80015a2:	4093      	lsls	r3, r2
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015aa:	492f      	ldr	r1, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	3302      	adds	r3, #2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c4:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	492b      	ldr	r1, [pc, #172]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4927      	ldr	r1, [pc, #156]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	4921      	ldr	r1, [pc, #132]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015fa:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	43db      	mvns	r3, r3
 8001602:	491d      	ldr	r1, [pc, #116]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 8001604:	4013      	ands	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4917      	ldr	r1, [pc, #92]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	43db      	mvns	r3, r3
 800162a:	4913      	ldr	r1, [pc, #76]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 800162c:	4013      	ands	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01f      	beq.n	800167c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	490d      	ldr	r1, [pc, #52]	; (8001678 <HAL_GPIO_Init+0x2c0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e01f      	b.n	800168a <HAL_GPIO_Init+0x2d2>
 800164a:	bf00      	nop
 800164c:	10320000 	.word	0x10320000
 8001650:	10310000 	.word	0x10310000
 8001654:	10220000 	.word	0x10220000
 8001658:	10210000 	.word	0x10210000
 800165c:	10120000 	.word	0x10120000
 8001660:	10110000 	.word	0x10110000
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00
 8001674:	40011000 	.word	0x40011000
 8001678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_GPIO_Init+0x2f4>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	43db      	mvns	r3, r3
 8001684:	4909      	ldr	r1, [pc, #36]	; (80016ac <HAL_GPIO_Init+0x2f4>)
 8001686:	4013      	ands	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	3301      	adds	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f ae96 	bne.w	80013cc <HAL_GPIO_Init+0x14>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	372c      	adds	r7, #44	; 0x2c
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016cc:	e003      	b.n	80016d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ce:	887b      	ldrh	r3, [r7, #2]
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	611a      	str	r2, [r3, #16]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43d9      	mvns	r1, r3
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	400b      	ands	r3, r1
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	611a      	str	r2, [r3, #16]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
	...

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e272      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8087 	beq.w	8001842 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001734:	4b92      	ldr	r3, [pc, #584]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b04      	cmp	r3, #4
 800173e:	d00c      	beq.n	800175a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001740:	4b8f      	ldr	r3, [pc, #572]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d112      	bne.n	8001772 <HAL_RCC_OscConfig+0x5e>
 800174c:	4b8c      	ldr	r3, [pc, #560]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d10b      	bne.n	8001772 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175a:	4b89      	ldr	r3, [pc, #548]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d06c      	beq.n	8001840 <HAL_RCC_OscConfig+0x12c>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d168      	bne.n	8001840 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e24c      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x76>
 800177c:	4b80      	ldr	r3, [pc, #512]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a7f      	ldr	r2, [pc, #508]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e02e      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x98>
 8001792:	4b7b      	ldr	r3, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7a      	ldr	r2, [pc, #488]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b78      	ldr	r3, [pc, #480]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a77      	ldr	r2, [pc, #476]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0xbc>
 80017b6:	4b72      	ldr	r3, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a71      	ldr	r2, [pc, #452]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xd4>
 80017d0:	4b6b      	ldr	r3, [pc, #428]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6a      	ldr	r2, [pc, #424]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a67      	ldr	r2, [pc, #412]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff f8dc 	bl	80009ac <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff f8d8 	bl	80009ac <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e200      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe4>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff f8c8 	bl	80009ac <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff f8c4 	bl	80009ac <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1ec      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x10c>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d063      	beq.n	8001916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800185a:	4b49      	ldr	r3, [pc, #292]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b08      	cmp	r3, #8
 8001864:	d11c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x18c>
 8001866:	4b46      	ldr	r3, [pc, #280]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x176>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e1c0      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4939      	ldr	r1, [pc, #228]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	e03a      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	4b36      	ldr	r3, [pc, #216]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff f87d 	bl	80009ac <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff f879 	bl	80009ac <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1a1      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4927      	ldr	r1, [pc, #156]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_RCC_OscConfig+0x270>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff f85c 	bl	80009ac <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff f858 	bl	80009ac <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e180      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d03a      	beq.n	8001998 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d019      	beq.n	800195e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff f83c 	bl	80009ac <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff f838 	bl	80009ac <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e160      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_RCC_OscConfig+0x26c>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001956:	2001      	movs	r0, #1
 8001958:	f000 fafe 	bl	8001f58 <RCC_Delay>
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_RCC_OscConfig+0x274>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff f822 	bl	80009ac <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196a:	e00f      	b.n	800198c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff f81e 	bl	80009ac <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d908      	bls.n	800198c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e146      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	42420000 	.word	0x42420000
 8001988:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	4b92      	ldr	r3, [pc, #584]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e9      	bne.n	800196c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80a6 	beq.w	8001af2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019aa:	4b8b      	ldr	r3, [pc, #556]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10d      	bne.n	80019d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b88      	ldr	r3, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a87      	ldr	r2, [pc, #540]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b85      	ldr	r3, [pc, #532]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ce:	2301      	movs	r3, #1
 80019d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b82      	ldr	r3, [pc, #520]	; (8001bdc <HAL_RCC_OscConfig+0x4c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d118      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019de:	4b7f      	ldr	r3, [pc, #508]	; (8001bdc <HAL_RCC_OscConfig+0x4c8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a7e      	ldr	r2, [pc, #504]	; (8001bdc <HAL_RCC_OscConfig+0x4c8>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ea:	f7fe ffdf 	bl	80009ac <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f2:	f7fe ffdb 	bl	80009ac <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b64      	cmp	r3, #100	; 0x64
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e103      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	4b75      	ldr	r3, [pc, #468]	; (8001bdc <HAL_RCC_OscConfig+0x4c8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x312>
 8001a18:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4a6e      	ldr	r2, [pc, #440]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6213      	str	r3, [r2, #32]
 8001a24:	e02d      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x334>
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a66      	ldr	r2, [pc, #408]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	e01c      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x356>
 8001a50:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4a60      	ldr	r2, [pc, #384]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6213      	str	r3, [r2, #32]
 8001a5c:	4b5e      	ldr	r3, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	4a5d      	ldr	r2, [pc, #372]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6213      	str	r3, [r2, #32]
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x36e>
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a5a      	ldr	r2, [pc, #360]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8a:	f7fe ff8f 	bl	80009ac <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7fe ff8b 	bl	80009ac <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0b1      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ee      	beq.n	8001a92 <HAL_RCC_OscConfig+0x37e>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7fe ff79 	bl	80009ac <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7fe ff75 	bl	80009ac <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e09b      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a3b      	ldr	r2, [pc, #236]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8087 	beq.w	8001c0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d061      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d146      	bne.n	8001b9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <HAL_RCC_OscConfig+0x4cc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7fe ff49 	bl	80009ac <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe ff45 	bl	80009ac <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e06d      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d108      	bne.n	8001b58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4921      	ldr	r1, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a19      	ldr	r1, [r3, #32]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	491b      	ldr	r1, [pc, #108]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x4cc>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7fe ff19 	bl	80009ac <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7fe ff15 	bl	80009ac <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e03d      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x46a>
 8001b9c:	e035      	b.n	8001c0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_RCC_OscConfig+0x4cc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe ff02 	bl	80009ac <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe fefe 	bl	80009ac <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e026      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x498>
 8001bca:	e01e      	b.n	8001c0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e019      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_OscConfig+0x500>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0d0      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d910      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4965      	ldr	r1, [pc, #404]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0b8      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d020      	beq.n	8001caa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	494d      	ldr	r1, [pc, #308]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d040      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e07f      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e073      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06b      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4936      	ldr	r1, [pc, #216]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d08:	f7fe fe50 	bl	80009ac <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7fe fe4c 	bl	80009ac <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e053      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d210      	bcs.n	8001d68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4922      	ldr	r1, [pc, #136]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d008      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4916      	ldr	r1, [pc, #88]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	490e      	ldr	r1, [pc, #56]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001da6:	f000 f821 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001daa:	4602      	mov	r2, r0
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	490a      	ldr	r1, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1c8>)
 8001db8:	5ccb      	ldrb	r3, [r1, r3]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1cc>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1d0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fd0a 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08005190 	.word	0x08005190
 8001de4:	20000008 	.word	0x20000008
 8001de8:	2000000c 	.word	0x2000000c

08001dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x30>
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x36>
 8001e1a:	e027      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1e:	613b      	str	r3, [r7, #16]
      break;
 8001e20:	e027      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	0c9b      	lsrs	r3, r3, #18
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0c5b      	lsrs	r3, r3, #17
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	fb03 f202 	mul.w	r2, r3, r2
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e004      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	613b      	str	r3, [r7, #16]
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e6e:	613b      	str	r3, [r7, #16]
      break;
 8001e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e72:	693b      	ldr	r3, [r7, #16]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	007a1200 	.word	0x007a1200
 8001e88:	080051a8 	.word	0x080051a8
 8001e8c:	080051b8 	.word	0x080051b8
 8001e90:	003d0900 	.word	0x003d0900

08001e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b02      	ldr	r3, [pc, #8]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eac:	f7ff fff2 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4903      	ldr	r1, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	080051a0 	.word	0x080051a0

08001ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0adb      	lsrs	r3, r3, #11
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	080051a0 	.word	0x080051a0

08001ef8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	220f      	movs	r2, #15
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCC_GetClockConfig+0x58>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_RCC_GetClockConfig+0x58>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_GetClockConfig+0x58>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_RCC_GetClockConfig+0x58>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0207 	and.w	r2, r3, #7
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40022000 	.word	0x40022000

08001f58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <RCC_Delay+0x34>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <RCC_Delay+0x38>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0a5b      	lsrs	r3, r3, #9
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f74:	bf00      	nop
  }
  while (Delay --);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1e5a      	subs	r2, r3, #1
 8001f7a:	60fa      	str	r2, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f9      	bne.n	8001f74 <RCC_Delay+0x1c>
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	10624dd3 	.word	0x10624dd3

08001f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e041      	b.n	800202a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f839 	bl	8002032 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f000 f9ae 	bl	8002334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d001      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e035      	b.n	80020c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <HAL_TIM_Base_Start_IT+0x90>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x4e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002086:	d004      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x4e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_TIM_Base_Start_IT+0x94>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d111      	bne.n	80020b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d010      	beq.n	80020c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b4:	e007      	b.n	80020c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40000400 	.word	0x40000400

080020dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0202 	mvn.w	r2, #2
 8002108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8ed 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8e0 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f8ef 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0204 	mvn.w	r2, #4
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f8c3 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8b6 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f8c5 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0208 	mvn.w	r2, #8
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f899 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f88c 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f89b 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0210 	mvn.w	r2, #16
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2208      	movs	r2, #8
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f86f 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f862 	bl	80022ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f871 	bl	8002310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0201 	mvn.w	r2, #1
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe f99e 	bl	800059c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8b5 	bl	80023f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f835 	bl	8002322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0220 	mvn.w	r2, #32
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f880 	bl	80023e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d007      	beq.n	800235c <TIM_Base_SetConfig+0x28>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002352:	d003      	beq.n	800235c <TIM_Base_SetConfig+0x28>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <TIM_Base_SetConfig+0xac>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d108      	bne.n	800236e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <TIM_Base_SetConfig+0x52>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d003      	beq.n	8002386 <TIM_Base_SetConfig+0x52>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <TIM_Base_SetConfig+0xac>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d108      	bne.n	8002398 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a07      	ldr	r2, [pc, #28]	; (80023dc <TIM_Base_SetConfig+0xa8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d103      	bne.n	80023cc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	615a      	str	r2, [r3, #20]
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40000400 	.word	0x40000400

080023e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e042      	b.n	80024a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe f98c 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800244a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f91d 	bl	800268c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d16d      	bne.n	80025a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_UART_Transmit+0x2c>
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e066      	b.n	80025a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	; 0x21
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024e6:	f7fe fa61 	bl	80009ac <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	88fa      	ldrh	r2, [r7, #6]
 80024f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002500:	d108      	bne.n	8002514 <HAL_UART_Transmit+0x6c>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	e003      	b.n	800251c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800251c:	e02a      	b.n	8002574 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f840 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e036      	b.n	80025a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10b      	bne.n	8002556 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800254c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3302      	adds	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	e007      	b.n	8002566 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	781a      	ldrb	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1cf      	bne.n	800251e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2200      	movs	r2, #0
 8002586:	2140      	movs	r1, #64	; 0x40
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f810 	bl	80025ae <UART_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e006      	b.n	80025a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b090      	sub	sp, #64	; 0x40
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025be:	e050      	b.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d04c      	beq.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0x30>
 80025ce:	f7fe f9ed 	bl	80009ac <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025da:	429a      	cmp	r2, r3
 80025dc:	d241      	bcs.n	8002662 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	330c      	adds	r3, #12
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	e853 3f00 	ldrex	r3, [r3]
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	330c      	adds	r3, #12
 80025fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fe:	637a      	str	r2, [r7, #52]	; 0x34
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e5      	bne.n	80025de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	613b      	str	r3, [r7, #16]
   return(result);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	3314      	adds	r3, #20
 8002630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002632:	623a      	str	r2, [r7, #32]
 8002634:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002636:	69f9      	ldr	r1, [r7, #28]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e5      	bne.n	8002612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e00f      	b.n	8002682 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4013      	ands	r3, r2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	429a      	cmp	r2, r3
 800267e:	d09f      	beq.n	80025c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3740      	adds	r7, #64	; 0x40
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026c6:	f023 030c 	bic.w	r3, r3, #12
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <UART_SetConfig+0x114>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d103      	bne.n	80026fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026f4:	f7ff fbec 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	e002      	b.n	8002702 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026fc:	f7ff fbd4 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8002700:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <UART_SetConfig+0x118>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	0119      	lsls	r1, r3, #4
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	441a      	add	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fbb2 f2f3 	udiv	r2, r2, r3
 8002738:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <UART_SetConfig+0x118>)
 800273a:	fba3 0302 	umull	r0, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	3332      	adds	r3, #50	; 0x32
 800274c:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <UART_SetConfig+0x118>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002758:	4419      	add	r1, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009a      	lsls	r2, r3, #2
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <UART_SetConfig+0x118>)
 8002772:	fba3 0302 	umull	r0, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2064      	movs	r0, #100	; 0x64
 800277a:	fb00 f303 	mul.w	r3, r0, r3
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	3332      	adds	r3, #50	; 0x32
 8002784:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <UART_SetConfig+0x118>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	440a      	add	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40013800 	.word	0x40013800
 80027a4:	51eb851f 	.word	0x51eb851f

080027a8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027ae:	f3ef 8305 	mrs	r3, IPSR
 80027b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80027b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10f      	bne.n	80027da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ba:	f3ef 8310 	mrs	r3, PRIMASK
 80027be:	607b      	str	r3, [r7, #4]
  return(result);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <osKernelInitialize+0x32>
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <osKernelInitialize+0x60>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d109      	bne.n	80027e2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027ce:	f3ef 8311 	mrs	r3, BASEPRI
 80027d2:	603b      	str	r3, [r7, #0]
  return(result);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80027da:	f06f 0305 	mvn.w	r3, #5
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e00c      	b.n	80027fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <osKernelInitialize+0x60>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <osKernelInitialize+0x60>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e002      	b.n	80027fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80027fc:	68fb      	ldr	r3, [r7, #12]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000194 	.word	0x20000194

0800280c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002812:	f3ef 8305 	mrs	r3, IPSR
 8002816:	60bb      	str	r3, [r7, #8]
  return(result);
 8002818:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800281e:	f3ef 8310 	mrs	r3, PRIMASK
 8002822:	607b      	str	r3, [r7, #4]
  return(result);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <osKernelStart+0x32>
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <osKernelStart+0x64>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d109      	bne.n	8002846 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002832:	f3ef 8311 	mrs	r3, BASEPRI
 8002836:	603b      	str	r3, [r7, #0]
  return(result);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <osKernelStart+0x3a>
    stat = osErrorISR;
 800283e:	f06f 0305 	mvn.w	r3, #5
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e00e      	b.n	8002864 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <osKernelStart+0x64>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <osKernelStart+0x64>)
 8002850:	2202      	movs	r2, #2
 8002852:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002854:	f001 f816 	bl	8003884 <vTaskStartScheduler>
      stat = osOK;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e002      	b.n	8002864 <osKernelStart+0x58>
    } else {
      stat = osError;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002864:	68fb      	ldr	r3, [r7, #12]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000194 	.word	0x20000194

08002874 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b092      	sub	sp, #72	; 0x48
 8002878:	af04      	add	r7, sp, #16
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002884:	f3ef 8305 	mrs	r3, IPSR
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800288c:	2b00      	cmp	r3, #0
 800288e:	f040 8094 	bne.w	80029ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002892:	f3ef 8310 	mrs	r3, PRIMASK
 8002896:	623b      	str	r3, [r7, #32]
  return(result);
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 808d 	bne.w	80029ba <osThreadNew+0x146>
 80028a0:	4b48      	ldr	r3, [pc, #288]	; (80029c4 <osThreadNew+0x150>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d106      	bne.n	80028b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028a8:	f3ef 8311 	mrs	r3, BASEPRI
 80028ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8082 	bne.w	80029ba <osThreadNew+0x146>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d07e      	beq.n	80029ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80028c0:	2318      	movs	r3, #24
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80028c4:	2300      	movs	r3, #0
 80028c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80028c8:	f107 031b 	add.w	r3, r7, #27
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d045      	beq.n	8002966 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <osThreadNew+0x74>
        name = attr->name;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <osThreadNew+0x9a>
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	2b38      	cmp	r3, #56	; 0x38
 8002900:	d805      	bhi.n	800290e <osThreadNew+0x9a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <osThreadNew+0x9e>
        return (NULL);
 800290e:	2300      	movs	r3, #0
 8002910:	e054      	b.n	80029bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00e      	beq.n	8002948 <osThreadNew+0xd4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b5b      	cmp	r3, #91	; 0x5b
 8002930:	d90a      	bls.n	8002948 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <osThreadNew+0xd4>
        mem = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
 8002946:	e010      	b.n	800296a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10c      	bne.n	800296a <osThreadNew+0xf6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <osThreadNew+0xf6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d104      	bne.n	800296a <osThreadNew+0xf6>
          mem = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
 8002964:	e001      	b.n	800296a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	2b01      	cmp	r3, #1
 800296e:	d110      	bne.n	8002992 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002978:	9202      	str	r2, [sp, #8]
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002984:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fde4 	bl	8003554 <xTaskCreateStatic>
 800298c:	4603      	mov	r3, r0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e013      	b.n	80029ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d110      	bne.n	80029ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	b29a      	uxth	r2, r3
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fe2e 	bl	800360c <xTaskCreate>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d001      	beq.n	80029ba <osThreadNew+0x146>
          hTask = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029ba:	697b      	ldr	r3, [r7, #20]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3738      	adds	r7, #56	; 0x38
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000194 	.word	0x20000194

080029c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <vApplicationGetIdleTaskMemory+0x28>)
 80029d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80029de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	20000198 	.word	0x20000198
 80029f4:	200001f4 	.word	0x200001f4

080029f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <vApplicationGetTimerTaskMemory+0x30>)
 8002a0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	200003f4 	.word	0x200003f4
 8002a28:	20000450 	.word	0x20000450

08002a2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f103 0208 	add.w	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f103 0208 	add.w	r2, r3, #8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f103 0208 	add.w	r2, r3, #8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d103      	bne.n	8002ae8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	e00c      	b.n	8002b02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3308      	adds	r3, #8
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e002      	b.n	8002af6 <vListInsert+0x2e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d2f6      	bcs.n	8002af0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6892      	ldr	r2, [r2, #8]
 8002b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6852      	ldr	r2, [r2, #4]
 8002b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d103      	bne.n	8002b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bb6:	f001 ff91 	bl	8004adc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc2:	68f9      	ldr	r1, [r7, #12]
 8002bc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	441a      	add	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	3b01      	subs	r3, #1
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	441a      	add	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	22ff      	movs	r2, #255	; 0xff
 8002bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	22ff      	movs	r2, #255	; 0xff
 8002c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d114      	bne.n	8002c36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01a      	beq.n	8002c4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3310      	adds	r3, #16
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f8bd 	bl	8003d98 <xTaskRemoveFromEventList>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <xQueueGenericReset+0xcc>)
 8002c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	e009      	b.n	8002c4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3310      	adds	r3, #16
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fef6 	bl	8002a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3324      	adds	r3, #36	; 0x24
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fef1 	bl	8002a2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c4a:	f001 ff77 	bl	8004b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	e000ed04 	.word	0xe000ed04

08002c5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08e      	sub	sp, #56	; 0x38
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <xQueueGenericCreateStatic+0x52>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <xQueueGenericCreateStatic+0x56>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <xQueueGenericCreateStatic+0x58>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	623b      	str	r3, [r7, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <xQueueGenericCreateStatic+0x7e>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <xQueueGenericCreateStatic+0x82>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <xQueueGenericCreateStatic+0x84>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	61fb      	str	r3, [r7, #28]
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cfa:	2350      	movs	r3, #80	; 0x50
 8002cfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b50      	cmp	r3, #80	; 0x50
 8002d02:	d00a      	beq.n	8002d1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	61bb      	str	r3, [r7, #24]
}
 8002d16:	bf00      	nop
 8002d18:	e7fe      	b.n	8002d18 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f805 	bl	8002d4a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3730      	adds	r7, #48	; 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e002      	b.n	8002d6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d78:	2101      	movs	r1, #1
 8002d7a:	69b8      	ldr	r0, [r7, #24]
 8002d7c:	f7ff ff06 	bl	8002b8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	; 0x38
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericSend+0x32>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d103      	bne.n	8002dd0 <xQueueGenericSend+0x40>
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <xQueueGenericSend+0x44>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <xQueueGenericSend+0x46>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <xQueueGenericSend+0x60>
	__asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dec:	bf00      	nop
 8002dee:	e7fe      	b.n	8002dee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d103      	bne.n	8002dfe <xQueueGenericSend+0x6e>
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <xQueueGenericSend+0x72>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <xQueueGenericSend+0x74>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueGenericSend+0x8e>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	623b      	str	r3, [r7, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e1e:	f001 f97d 	bl	800411c <xTaskGetSchedulerState>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <xQueueGenericSend+0x9e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <xQueueGenericSend+0xa2>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <xQueueGenericSend+0xa4>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueGenericSend+0xbe>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	61fb      	str	r3, [r7, #28]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e4e:	f001 fe45 	bl	8004adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <xQueueGenericSend+0xd4>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d129      	bne.n	8002eb8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e6a:	f000 fa07 	bl	800327c <prvCopyDataToQueue>
 8002e6e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	3324      	adds	r3, #36	; 0x24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 ff8b 	bl	8003d98 <xTaskRemoveFromEventList>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e88:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	e00a      	b.n	8002eb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ea0:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002eb0:	f001 fe44 	bl	8004b3c <vPortExitCritical>
				return pdPASS;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e063      	b.n	8002f80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ebe:	f001 fe3d 	bl	8004b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e05c      	b.n	8002f80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 ffc5 	bl	8003e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eda:	f001 fe2f 	bl	8004b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ede:	f000 fd37 	bl	8003950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ee2:	f001 fdfb 	bl	8004adc <vPortEnterCritical>
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d103      	bne.n	8002efc <xQueueGenericSend+0x16c>
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f02:	b25b      	sxtb	r3, r3
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d103      	bne.n	8002f12 <xQueueGenericSend+0x182>
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f12:	f001 fe13 	bl	8004b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f16:	1d3a      	adds	r2, r7, #4
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 ffb4 	bl	8003e8c <xTaskCheckForTimeOut>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d124      	bne.n	8002f74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2c:	f000 fa9e 	bl	800346c <prvIsQueueFull>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d018      	beq.n	8002f68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	3310      	adds	r3, #16
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 feda 	bl	8003cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f46:	f000 fa29 	bl	800339c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f4a:	f000 fd0f 	bl	800396c <xTaskResumeAll>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f af7c 	bne.w	8002e4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <xQueueGenericSend+0x1f8>)
 8002f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	e772      	b.n	8002e4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6a:	f000 fa17 	bl	800339c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f6e:	f000 fcfd 	bl	800396c <xTaskResumeAll>
 8002f72:	e76c      	b.n	8002e4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f76:	f000 fa11 	bl	800339c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f7a:	f000 fcf7 	bl	800396c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f7e:	2300      	movs	r3, #0
		}
	}
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3738      	adds	r7, #56	; 0x38
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08e      	sub	sp, #56	; 0x38
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <xQueueGenericSendFromISR+0x3c>
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <xQueueGenericSendFromISR+0x40>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <xQueueGenericSendFromISR+0x42>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	623b      	str	r3, [r7, #32]
}
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d103      	bne.n	8002ff6 <xQueueGenericSendFromISR+0x6a>
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <xQueueGenericSendFromISR+0x6e>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <xQueueGenericSendFromISR+0x70>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	61fb      	str	r3, [r7, #28]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003016:	f001 fe23 	bl	8004c60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800301a:	f3ef 8211 	mrs	r2, BASEPRI
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	61ba      	str	r2, [r7, #24]
 8003030:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003032:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <xQueueGenericSendFromISR+0xbc>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d12c      	bne.n	80030a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003058:	f000 f910 	bl	800327c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800305c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d112      	bne.n	800308c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	3324      	adds	r3, #36	; 0x24
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fe90 	bl	8003d98 <xTaskRemoveFromEventList>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00e      	beq.n	800309c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e007      	b.n	800309c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800308c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003090:	3301      	adds	r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	b25a      	sxtb	r2, r3
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800309c:	2301      	movs	r3, #1
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80030a0:	e001      	b.n	80030a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3738      	adds	r7, #56	; 0x38
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	; 0x30
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <xQueueReceive+0x30>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	623b      	str	r3, [r7, #32]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d103      	bne.n	80030fa <xQueueReceive+0x3e>
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <xQueueReceive+0x42>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <xQueueReceive+0x44>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xQueueReceive+0x5e>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	61fb      	str	r3, [r7, #28]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800311a:	f000 ffff 	bl	800411c <xTaskGetSchedulerState>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <xQueueReceive+0x6e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <xQueueReceive+0x72>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <xQueueReceive+0x74>
 800312e:	2300      	movs	r3, #0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <xQueueReceive+0x8e>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	61bb      	str	r3, [r7, #24]
}
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800314a:	f001 fcc7 	bl	8004adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01f      	beq.n	800319a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800315e:	f000 f8f7 	bl	8003350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00f      	beq.n	8003192 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	3310      	adds	r3, #16
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fe0e 	bl	8003d98 <xTaskRemoveFromEventList>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <xQueueReceive+0x1bc>)
 8003184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003192:	f001 fcd3 	bl	8004b3c <vPortExitCritical>
				return pdPASS;
 8003196:	2301      	movs	r3, #1
 8003198:	e069      	b.n	800326e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031a0:	f001 fccc 	bl	8004b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e062      	b.n	800326e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ae:	f107 0310 	add.w	r3, r7, #16
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fe54 	bl	8003e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031b8:	2301      	movs	r3, #1
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031bc:	f001 fcbe 	bl	8004b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031c0:	f000 fbc6 	bl	8003950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031c4:	f001 fc8a 	bl	8004adc <vPortEnterCritical>
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031ce:	b25b      	sxtb	r3, r3
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d103      	bne.n	80031de <xQueueReceive+0x122>
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031e4:	b25b      	sxtb	r3, r3
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d103      	bne.n	80031f4 <xQueueReceive+0x138>
 80031ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f4:	f001 fca2 	bl	8004b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031f8:	1d3a      	adds	r2, r7, #4
 80031fa:	f107 0310 	add.w	r3, r7, #16
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe43 	bl	8003e8c <xTaskCheckForTimeOut>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d123      	bne.n	8003254 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800320c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320e:	f000 f917 	bl	8003440 <prvIsQueueEmpty>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d017      	beq.n	8003248 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	3324      	adds	r3, #36	; 0x24
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fd69 	bl	8003cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003228:	f000 f8b8 	bl	800339c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800322c:	f000 fb9e 	bl	800396c <xTaskResumeAll>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d189      	bne.n	800314a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003236:	4b10      	ldr	r3, [pc, #64]	; (8003278 <xQueueReceive+0x1bc>)
 8003238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	e780      	b.n	800314a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800324a:	f000 f8a7 	bl	800339c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800324e:	f000 fb8d 	bl	800396c <xTaskResumeAll>
 8003252:	e77a      	b.n	800314a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003256:	f000 f8a1 	bl	800339c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800325a:	f000 fb87 	bl	800396c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800325e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003260:	f000 f8ee 	bl	8003440 <prvIsQueueEmpty>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f43f af6f 	beq.w	800314a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800326c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800326e:	4618      	mov	r0, r3
 8003270:	3730      	adds	r7, #48	; 0x30
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10d      	bne.n	80032b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d14d      	bne.n	800333e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 ff56 	bl	8004158 <xTaskPriorityDisinherit>
 80032ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	e043      	b.n	800333e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d119      	bne.n	80032f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6898      	ldr	r0, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	461a      	mov	r2, r3
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	f001 ff04 	bl	80050d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	441a      	add	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d32b      	bcc.n	800333e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	e026      	b.n	800333e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68d8      	ldr	r0, [r3, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	461a      	mov	r2, r3
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	f001 feea 	bl	80050d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	425b      	negs	r3, r3
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d207      	bcs.n	800332c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	425b      	negs	r3, r3
 8003326:	441a      	add	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d105      	bne.n	800333e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	3b01      	subs	r3, #1
 800333c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d018      	beq.n	8003394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	441a      	add	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	429a      	cmp	r2, r3
 800337a:	d303      	bcc.n	8003384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68d9      	ldr	r1, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	461a      	mov	r2, r3
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f001 fea0 	bl	80050d4 <memcpy>
	}
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033a4:	f001 fb9a 	bl	8004adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033b0:	e011      	b.n	80033d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d012      	beq.n	80033e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3324      	adds	r3, #36	; 0x24
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fcea 	bl	8003d98 <xTaskRemoveFromEventList>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033ca:	f000 fdc1 	bl	8003f50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	dce9      	bgt.n	80033b2 <prvUnlockQueue+0x16>
 80033de:	e000      	b.n	80033e2 <prvUnlockQueue+0x46>
					break;
 80033e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	22ff      	movs	r2, #255	; 0xff
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033ea:	f001 fba7 	bl	8004b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033ee:	f001 fb75 	bl	8004adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033fa:	e011      	b.n	8003420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3310      	adds	r3, #16
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fcc5 	bl	8003d98 <xTaskRemoveFromEventList>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003414:	f000 fd9c 	bl	8003f50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003418:	7bbb      	ldrb	r3, [r7, #14]
 800341a:	3b01      	subs	r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003424:	2b00      	cmp	r3, #0
 8003426:	dce9      	bgt.n	80033fc <prvUnlockQueue+0x60>
 8003428:	e000      	b.n	800342c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800342a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003434:	f001 fb82 	bl	8004b3c <vPortExitCritical>
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003448:	f001 fb48 	bl	8004adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003454:	2301      	movs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e001      	b.n	800345e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800345e:	f001 fb6d 	bl	8004b3c <vPortExitCritical>

	return xReturn;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003474:	f001 fb32 	bl	8004adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	429a      	cmp	r2, r3
 8003482:	d102      	bne.n	800348a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e001      	b.n	800348e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800348e:	f001 fb55 	bl	8004b3c <vPortExitCritical>

	return xReturn;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e014      	b.n	80034d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034ac:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <vQueueAddToRegistry+0x4c>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034b8:	490b      	ldr	r1, [pc, #44]	; (80034e8 <vQueueAddToRegistry+0x4c>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <vQueueAddToRegistry+0x4c>)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034ce:	e006      	b.n	80034de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3301      	adds	r3, #1
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b07      	cmp	r3, #7
 80034da:	d9e7      	bls.n	80034ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	20000850 	.word	0x20000850

080034ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034fc:	f001 faee 	bl	8004adc <vPortEnterCritical>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003506:	b25b      	sxtb	r3, r3
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d103      	bne.n	8003516 <vQueueWaitForMessageRestricted+0x2a>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800351c:	b25b      	sxtb	r3, r3
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d103      	bne.n	800352c <vQueueWaitForMessageRestricted+0x40>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800352c:	f001 fb06 	bl	8004b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3324      	adds	r3, #36	; 0x24
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fbfd 	bl	8003d40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff28 	bl	800339c <prvUnlockQueue>
	}
 800354c:	bf00      	nop
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	; 0x38
 8003558:	af04      	add	r7, sp, #16
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	623b      	str	r3, [r7, #32]
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800357e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xTaskCreateStatic+0x46>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	61fb      	str	r3, [r7, #28]
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800359a:	235c      	movs	r3, #92	; 0x5c
 800359c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b5c      	cmp	r3, #92	; 0x5c
 80035a2:	d00a      	beq.n	80035ba <xTaskCreateStatic+0x66>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	61bb      	str	r3, [r7, #24]
}
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01e      	beq.n	80035fe <xTaskCreateStatic+0xaa>
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01b      	beq.n	80035fe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035d8:	2300      	movs	r3, #0
 80035da:	9303      	str	r3, [sp, #12]
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f850 	bl	8003696 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035f8:	f000 f8d4 	bl	80037a4 <prvAddNewTaskToReadyList>
 80035fc:	e001      	b.n	8003602 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003602:	697b      	ldr	r3, [r7, #20]
	}
 8003604:	4618      	mov	r0, r3
 8003606:	3728      	adds	r7, #40	; 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	; 0x30
 8003610:	af04      	add	r7, sp, #16
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fb5b 	bl	8004cdc <pvPortMalloc>
 8003626:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00e      	beq.n	800364c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800362e:	205c      	movs	r0, #92	; 0x5c
 8003630:	f001 fb54 	bl	8004cdc <pvPortMalloc>
 8003634:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
 8003642:	e005      	b.n	8003650 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003644:	6978      	ldr	r0, [r7, #20]
 8003646:	f001 fc0d 	bl	8004e64 <vPortFree>
 800364a:	e001      	b.n	8003650 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d017      	beq.n	8003686 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800365e:	88fa      	ldrh	r2, [r7, #6]
 8003660:	2300      	movs	r3, #0
 8003662:	9303      	str	r3, [sp, #12]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f80e 	bl	8003696 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800367a:	69f8      	ldr	r0, [r7, #28]
 800367c:	f000 f892 	bl	80037a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003680:	2301      	movs	r3, #1
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	e002      	b.n	800368c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800368c:	69bb      	ldr	r3, [r7, #24]
	}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b088      	sub	sp, #32
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	461a      	mov	r2, r3
 80036ae:	21a5      	movs	r1, #165	; 0xa5
 80036b0:	f001 fd1e 	bl	80050f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036be:	3b01      	subs	r3, #1
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f023 0307 	bic.w	r3, r3, #7
 80036cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <prvInitialiseNewTask+0x58>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	617b      	str	r3, [r7, #20]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e012      	b.n	800371a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	7819      	ldrb	r1, [r3, #0]
 80036fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	3334      	adds	r3, #52	; 0x34
 8003704:	460a      	mov	r2, r1
 8003706:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	3301      	adds	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2b0f      	cmp	r3, #15
 800371e:	d9e9      	bls.n	80036f4 <prvInitialiseNewTask+0x5e>
 8003720:	e000      	b.n	8003724 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003722:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	2b37      	cmp	r3, #55	; 0x37
 8003730:	d901      	bls.n	8003736 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003732:	2337      	movs	r3, #55	; 0x37
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003740:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2200      	movs	r2, #0
 8003746:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	3304      	adds	r3, #4
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff f98c 	bl	8002a6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	3318      	adds	r3, #24
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f987 	bl	8002a6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003760:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	2200      	movs	r2, #0
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	69b8      	ldr	r0, [r7, #24]
 8003786:	f001 f8bb 	bl	8004900 <pxPortInitialiseStack>
 800378a:	4602      	mov	r2, r0
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800379c:	bf00      	nop
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037ac:	f001 f996 	bl	8004adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037b0:	4b2d      	ldr	r3, [pc, #180]	; (8003868 <prvAddNewTaskToReadyList+0xc4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	4a2c      	ldr	r2, [pc, #176]	; (8003868 <prvAddNewTaskToReadyList+0xc4>)
 80037b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037ba:	4b2c      	ldr	r3, [pc, #176]	; (800386c <prvAddNewTaskToReadyList+0xc8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037c2:	4a2a      	ldr	r2, [pc, #168]	; (800386c <prvAddNewTaskToReadyList+0xc8>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037c8:	4b27      	ldr	r3, [pc, #156]	; (8003868 <prvAddNewTaskToReadyList+0xc4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d110      	bne.n	80037f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037d0:	f000 fbe2 	bl	8003f98 <prvInitialiseTaskLists>
 80037d4:	e00d      	b.n	80037f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <prvAddNewTaskToReadyList+0xcc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <prvAddNewTaskToReadyList+0xc8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d802      	bhi.n	80037f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <prvAddNewTaskToReadyList+0xc8>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <prvAddNewTaskToReadyList+0xd0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a1e      	ldr	r2, [pc, #120]	; (8003874 <prvAddNewTaskToReadyList+0xd0>)
 80037fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <prvAddNewTaskToReadyList+0xd0>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <prvAddNewTaskToReadyList+0xd4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d903      	bls.n	8003818 <prvAddNewTaskToReadyList+0x74>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4a18      	ldr	r2, [pc, #96]	; (8003878 <prvAddNewTaskToReadyList+0xd4>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a15      	ldr	r2, [pc, #84]	; (800387c <prvAddNewTaskToReadyList+0xd8>)
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f7ff f927 	bl	8002a82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003834:	f001 f982 	bl	8004b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <prvAddNewTaskToReadyList+0xcc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <prvAddNewTaskToReadyList+0xc8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	429a      	cmp	r2, r3
 800384c:	d207      	bcs.n	800385e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <prvAddNewTaskToReadyList+0xdc>)
 8003850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000d64 	.word	0x20000d64
 800386c:	20000890 	.word	0x20000890
 8003870:	20000d70 	.word	0x20000d70
 8003874:	20000d80 	.word	0x20000d80
 8003878:	20000d6c 	.word	0x20000d6c
 800387c:	20000894 	.word	0x20000894
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003892:	463a      	mov	r2, r7
 8003894:	1d39      	adds	r1, r7, #4
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff f894 	bl	80029c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038a0:	6839      	ldr	r1, [r7, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	9202      	str	r2, [sp, #8]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2300      	movs	r3, #0
 80038b0:	460a      	mov	r2, r1
 80038b2:	4921      	ldr	r1, [pc, #132]	; (8003938 <vTaskStartScheduler+0xb4>)
 80038b4:	4821      	ldr	r0, [pc, #132]	; (800393c <vTaskStartScheduler+0xb8>)
 80038b6:	f7ff fe4d 	bl	8003554 <xTaskCreateStatic>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <vTaskStartScheduler+0xbc>)
 80038be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <vTaskStartScheduler+0xbc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038c8:	2301      	movs	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e001      	b.n	80038d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d102      	bne.n	80038de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038d8:	f000 fd00 	bl	80042dc <xTimerCreateTimerTask>
 80038dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d116      	bne.n	8003912 <vTaskStartScheduler+0x8e>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	613b      	str	r3, [r7, #16]
}
 80038f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <vTaskStartScheduler+0xc0>)
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <vTaskStartScheduler+0xc4>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003906:	4b11      	ldr	r3, [pc, #68]	; (800394c <vTaskStartScheduler+0xc8>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800390c:	f001 f874 	bl	80049f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003910:	e00e      	b.n	8003930 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d10a      	bne.n	8003930 <vTaskStartScheduler+0xac>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60fb      	str	r3, [r7, #12]
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <vTaskStartScheduler+0xaa>
}
 8003930:	bf00      	nop
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	08005130 	.word	0x08005130
 800393c:	08003f69 	.word	0x08003f69
 8003940:	20000d88 	.word	0x20000d88
 8003944:	20000d84 	.word	0x20000d84
 8003948:	20000d70 	.word	0x20000d70
 800394c:	20000d68 	.word	0x20000d68

08003950 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <vTaskSuspendAll+0x18>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	4a03      	ldr	r2, [pc, #12]	; (8003968 <vTaskSuspendAll+0x18>)
 800395c:	6013      	str	r3, [r2, #0]
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000d8c 	.word	0x20000d8c

0800396c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800397a:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <xTaskResumeAll+0x118>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <xTaskResumeAll+0x2c>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	603b      	str	r3, [r7, #0]
}
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003998:	f001 f8a0 	bl	8004adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800399c:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <xTaskResumeAll+0x118>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <xTaskResumeAll+0x118>)
 80039a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <xTaskResumeAll+0x118>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d162      	bne.n	8003a74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ae:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <xTaskResumeAll+0x11c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d05e      	beq.n	8003a74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b6:	e02f      	b.n	8003a18 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039b8:	4b34      	ldr	r3, [pc, #208]	; (8003a8c <xTaskResumeAll+0x120>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3318      	adds	r3, #24
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff f8b7 	bl	8002b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff f8b2 	bl	8002b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <xTaskResumeAll+0x124>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d903      	bls.n	80039e8 <xTaskResumeAll+0x7c>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <xTaskResumeAll+0x124>)
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <xTaskResumeAll+0x128>)
 80039f6:	441a      	add	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f7ff f83f 	bl	8002a82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <xTaskResumeAll+0x12c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <xTaskResumeAll+0x130>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <xTaskResumeAll+0x120>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1cb      	bne.n	80039b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a26:	f000 fb55 	bl	80040d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a2a:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <xTaskResumeAll+0x134>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a36:	f000 f845 	bl	8003ac4 <xTaskIncrementTick>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <xTaskResumeAll+0x130>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f1      	bne.n	8003a36 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <xTaskResumeAll+0x134>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <xTaskResumeAll+0x130>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a60:	2301      	movs	r3, #1
 8003a62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <xTaskResumeAll+0x138>)
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a74:	f001 f862 	bl	8004b3c <vPortExitCritical>

	return xAlreadyYielded;
 8003a78:	68bb      	ldr	r3, [r7, #8]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000d8c 	.word	0x20000d8c
 8003a88:	20000d64 	.word	0x20000d64
 8003a8c:	20000d24 	.word	0x20000d24
 8003a90:	20000d6c 	.word	0x20000d6c
 8003a94:	20000894 	.word	0x20000894
 8003a98:	20000890 	.word	0x20000890
 8003a9c:	20000d78 	.word	0x20000d78
 8003aa0:	20000d74 	.word	0x20000d74
 8003aa4:	e000ed04 	.word	0xe000ed04

08003aa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <xTaskGetTickCount+0x18>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ab4:	687b      	ldr	r3, [r7, #4]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	20000d68 	.word	0x20000d68

08003ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <xTaskIncrementTick+0x150>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f040 808e 	bne.w	8003bf4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ad8:	4b4f      	ldr	r3, [pc, #316]	; (8003c18 <xTaskIncrementTick+0x154>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ae0:	4a4d      	ldr	r2, [pc, #308]	; (8003c18 <xTaskIncrementTick+0x154>)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d120      	bne.n	8003b2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003aec:	4b4b      	ldr	r3, [pc, #300]	; (8003c1c <xTaskIncrementTick+0x158>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <xTaskIncrementTick+0x48>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	603b      	str	r3, [r7, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <xTaskIncrementTick+0x46>
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <xTaskIncrementTick+0x158>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <xTaskIncrementTick+0x15c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a41      	ldr	r2, [pc, #260]	; (8003c1c <xTaskIncrementTick+0x158>)
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4a41      	ldr	r2, [pc, #260]	; (8003c20 <xTaskIncrementTick+0x15c>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	4b40      	ldr	r3, [pc, #256]	; (8003c24 <xTaskIncrementTick+0x160>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a3f      	ldr	r2, [pc, #252]	; (8003c24 <xTaskIncrementTick+0x160>)
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	f000 fad3 	bl	80040d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	; (8003c28 <xTaskIncrementTick+0x164>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d34e      	bcc.n	8003bd6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b38:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <xTaskIncrementTick+0x158>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <xTaskIncrementTick+0x82>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <xTaskIncrementTick+0x84>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4c:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <xTaskIncrementTick+0x164>)
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b52:	601a      	str	r2, [r3, #0]
					break;
 8003b54:	e03f      	b.n	8003bd6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b56:	4b31      	ldr	r3, [pc, #196]	; (8003c1c <xTaskIncrementTick+0x158>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d203      	bcs.n	8003b76 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b6e:	4a2e      	ldr	r2, [pc, #184]	; (8003c28 <xTaskIncrementTick+0x164>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6013      	str	r3, [r2, #0]
						break;
 8003b74:	e02f      	b.n	8003bd6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe ffdc 	bl	8002b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe ffd3 	bl	8002b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <xTaskIncrementTick+0x168>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d903      	bls.n	8003ba6 <xTaskIncrementTick+0xe2>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <xTaskIncrementTick+0x168>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4a1f      	ldr	r2, [pc, #124]	; (8003c30 <xTaskIncrementTick+0x16c>)
 8003bb4:	441a      	add	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7fe ff60 	bl	8002a82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <xTaskIncrementTick+0x170>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3b3      	bcc.n	8003b38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd4:	e7b0      	b.n	8003b38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <xTaskIncrementTick+0x170>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	4914      	ldr	r1, [pc, #80]	; (8003c30 <xTaskIncrementTick+0x16c>)
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d907      	bls.n	8003bfe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e004      	b.n	8003bfe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003bf4:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <xTaskIncrementTick+0x174>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <xTaskIncrementTick+0x174>)
 8003bfc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <xTaskIncrementTick+0x178>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003c06:	2301      	movs	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c0a:	697b      	ldr	r3, [r7, #20]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000d8c 	.word	0x20000d8c
 8003c18:	20000d68 	.word	0x20000d68
 8003c1c:	20000d1c 	.word	0x20000d1c
 8003c20:	20000d20 	.word	0x20000d20
 8003c24:	20000d7c 	.word	0x20000d7c
 8003c28:	20000d84 	.word	0x20000d84
 8003c2c:	20000d6c 	.word	0x20000d6c
 8003c30:	20000894 	.word	0x20000894
 8003c34:	20000890 	.word	0x20000890
 8003c38:	20000d74 	.word	0x20000d74
 8003c3c:	20000d78 	.word	0x20000d78

08003c40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c46:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <vTaskSwitchContext+0xa4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c4e:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <vTaskSwitchContext+0xa8>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c54:	e041      	b.n	8003cda <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <vTaskSwitchContext+0xa8>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c5c:	4b23      	ldr	r3, [pc, #140]	; (8003cec <vTaskSwitchContext+0xac>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e010      	b.n	8003c86 <vTaskSwitchContext+0x46>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <vTaskSwitchContext+0x40>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	607b      	str	r3, [r7, #4]
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <vTaskSwitchContext+0x3e>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	491a      	ldr	r1, [pc, #104]	; (8003cf0 <vTaskSwitchContext+0xb0>)
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0e4      	beq.n	8003c64 <vTaskSwitchContext+0x24>
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <vTaskSwitchContext+0xb0>)
 8003ca6:	4413      	add	r3, r2
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d104      	bne.n	8003cca <vTaskSwitchContext+0x8a>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a08      	ldr	r2, [pc, #32]	; (8003cf4 <vTaskSwitchContext+0xb4>)
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4a05      	ldr	r2, [pc, #20]	; (8003cec <vTaskSwitchContext+0xac>)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6013      	str	r3, [r2, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	20000d8c 	.word	0x20000d8c
 8003ce8:	20000d78 	.word	0x20000d78
 8003cec:	20000d6c 	.word	0x20000d6c
 8003cf0:	20000894 	.word	0x20000894
 8003cf4:	20000890 	.word	0x20000890

08003cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	60fb      	str	r3, [r7, #12]
}
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <vTaskPlaceOnEventList+0x44>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3318      	adds	r3, #24
 8003d24:	4619      	mov	r1, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe fece 	bl	8002ac8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	6838      	ldr	r0, [r7, #0]
 8003d30:	f000 fa80 	bl	8004234 <prvAddCurrentTaskToDelayedList>
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000890 	.word	0x20000890

08003d40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	617b      	str	r3, [r7, #20]
}
 8003d64:	bf00      	nop
 8003d66:	e7fe      	b.n	8003d66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3318      	adds	r3, #24
 8003d6e:	4619      	mov	r1, r3
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7fe fe86 	bl	8002a82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	68b8      	ldr	r0, [r7, #8]
 8003d86:	f000 fa55 	bl	8004234 <prvAddCurrentTaskToDelayedList>
	}
 8003d8a:	bf00      	nop
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000890 	.word	0x20000890

08003d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	60fb      	str	r3, [r7, #12]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe feb5 	bl	8002b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dce:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <xTaskRemoveFromEventList+0xb0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11d      	bne.n	8003e12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe feac 	bl	8002b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <xTaskRemoveFromEventList+0xb4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d903      	bls.n	8003df4 <xTaskRemoveFromEventList+0x5c>
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <xTaskRemoveFromEventList+0xb4>)
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <xTaskRemoveFromEventList+0xb8>)
 8003e02:	441a      	add	r2, r3
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f7fe fe39 	bl	8002a82 <vListInsertEnd>
 8003e10:	e005      	b.n	8003e1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3318      	adds	r3, #24
 8003e16:	4619      	mov	r1, r3
 8003e18:	480e      	ldr	r0, [pc, #56]	; (8003e54 <xTaskRemoveFromEventList+0xbc>)
 8003e1a:	f7fe fe32 	bl	8002a82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <xTaskRemoveFromEventList+0xc0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d905      	bls.n	8003e38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <xTaskRemoveFromEventList+0xc4>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e001      	b.n	8003e3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e3c:	697b      	ldr	r3, [r7, #20]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000d8c 	.word	0x20000d8c
 8003e4c:	20000d6c 	.word	0x20000d6c
 8003e50:	20000894 	.word	0x20000894
 8003e54:	20000d24 	.word	0x20000d24
 8003e58:	20000890 	.word	0x20000890
 8003e5c:	20000d78 	.word	0x20000d78

08003e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <vTaskInternalSetTimeOutState+0x24>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <vTaskInternalSetTimeOutState+0x28>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	605a      	str	r2, [r3, #4]
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000d7c 	.word	0x20000d7c
 8003e88:	20000d68 	.word	0x20000d68

08003e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	613b      	str	r3, [r7, #16]
}
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60fb      	str	r3, [r7, #12]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ece:	f000 fe05 	bl	8004adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <xTaskCheckForTimeOut+0xbc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d102      	bne.n	8003ef2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e023      	b.n	8003f3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <xTaskCheckForTimeOut+0xc0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d007      	beq.n	8003f0e <xTaskCheckForTimeOut+0x82>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d302      	bcc.n	8003f0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	e015      	b.n	8003f3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d20b      	bcs.n	8003f30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad2      	subs	r2, r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff9b 	bl	8003e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e004      	b.n	8003f3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f3a:	f000 fdff 	bl	8004b3c <vPortExitCritical>

	return xReturn;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000d68 	.word	0x20000d68
 8003f4c:	20000d7c 	.word	0x20000d7c

08003f50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <vTaskMissedYield+0x14>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000d78 	.word	0x20000d78

08003f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f70:	f000 f852 	bl	8004018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <prvIdleTask+0x28>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d9f9      	bls.n	8003f70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <prvIdleTask+0x2c>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f8c:	e7f0      	b.n	8003f70 <prvIdleTask+0x8>
 8003f8e:	bf00      	nop
 8003f90:	20000894 	.word	0x20000894
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	e00c      	b.n	8003fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <prvInitialiseTaskLists+0x60>)
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fd3a 	bl	8002a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b37      	cmp	r3, #55	; 0x37
 8003fc2:	d9ef      	bls.n	8003fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fc4:	480d      	ldr	r0, [pc, #52]	; (8003ffc <prvInitialiseTaskLists+0x64>)
 8003fc6:	f7fe fd31 	bl	8002a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fca:	480d      	ldr	r0, [pc, #52]	; (8004000 <prvInitialiseTaskLists+0x68>)
 8003fcc:	f7fe fd2e 	bl	8002a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fd0:	480c      	ldr	r0, [pc, #48]	; (8004004 <prvInitialiseTaskLists+0x6c>)
 8003fd2:	f7fe fd2b 	bl	8002a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fd6:	480c      	ldr	r0, [pc, #48]	; (8004008 <prvInitialiseTaskLists+0x70>)
 8003fd8:	f7fe fd28 	bl	8002a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fdc:	480b      	ldr	r0, [pc, #44]	; (800400c <prvInitialiseTaskLists+0x74>)
 8003fde:	f7fe fd25 	bl	8002a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <prvInitialiseTaskLists+0x78>)
 8003fe4:	4a05      	ldr	r2, [pc, #20]	; (8003ffc <prvInitialiseTaskLists+0x64>)
 8003fe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <prvInitialiseTaskLists+0x7c>)
 8003fea:	4a05      	ldr	r2, [pc, #20]	; (8004000 <prvInitialiseTaskLists+0x68>)
 8003fec:	601a      	str	r2, [r3, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000894 	.word	0x20000894
 8003ffc:	20000cf4 	.word	0x20000cf4
 8004000:	20000d08 	.word	0x20000d08
 8004004:	20000d24 	.word	0x20000d24
 8004008:	20000d38 	.word	0x20000d38
 800400c:	20000d50 	.word	0x20000d50
 8004010:	20000d1c 	.word	0x20000d1c
 8004014:	20000d20 	.word	0x20000d20

08004018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800401e:	e019      	b.n	8004054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004020:	f000 fd5c 	bl	8004adc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <prvCheckTasksWaitingTermination+0x50>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe fd81 	bl	8002b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004036:	4b0d      	ldr	r3, [pc, #52]	; (800406c <prvCheckTasksWaitingTermination+0x54>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3b01      	subs	r3, #1
 800403c:	4a0b      	ldr	r2, [pc, #44]	; (800406c <prvCheckTasksWaitingTermination+0x54>)
 800403e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <prvCheckTasksWaitingTermination+0x58>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3b01      	subs	r3, #1
 8004046:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <prvCheckTasksWaitingTermination+0x58>)
 8004048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800404a:	f000 fd77 	bl	8004b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f810 	bl	8004074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <prvCheckTasksWaitingTermination+0x58>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e1      	bne.n	8004020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000d38 	.word	0x20000d38
 800406c:	20000d64 	.word	0x20000d64
 8004070:	20000d4c 	.word	0x20000d4c

08004074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	4618      	mov	r0, r3
 800408c:	f000 feea 	bl	8004e64 <vPortFree>
				vPortFree( pxTCB );
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fee7 	bl	8004e64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004096:	e018      	b.n	80040ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d103      	bne.n	80040aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fede 	bl	8004e64 <vPortFree>
	}
 80040a8:	e00f      	b.n	80040ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d00a      	beq.n	80040ca <prvDeleteTCB+0x56>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	60fb      	str	r3, [r7, #12]
}
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <prvDeleteTCB+0x54>
	}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <prvResetNextTaskUnblockTime+0x40>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <prvResetNextTaskUnblockTime+0x14>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <prvResetNextTaskUnblockTime+0x16>
 80040e8:	2300      	movs	r3, #0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <prvResetNextTaskUnblockTime+0x44>)
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295
 80040f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040f6:	e008      	b.n	800410a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvResetNextTaskUnblockTime+0x40>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <prvResetNextTaskUnblockTime+0x44>)
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	20000d1c 	.word	0x20000d1c
 8004118:	20000d84 	.word	0x20000d84

0800411c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <xTaskGetSchedulerState+0x34>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800412a:	2301      	movs	r3, #1
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	e008      	b.n	8004142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004130:	4b08      	ldr	r3, [pc, #32]	; (8004154 <xTaskGetSchedulerState+0x38>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004138:	2302      	movs	r3, #2
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	e001      	b.n	8004142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004142:	687b      	ldr	r3, [r7, #4]
	}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000d70 	.word	0x20000d70
 8004154:	20000d8c 	.word	0x20000d8c

08004158 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d056      	beq.n	800421c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800416e:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <xTaskPriorityDisinherit+0xd0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	d00a      	beq.n	800418e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60fb      	str	r3, [r7, #12]
}
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	60bb      	str	r3, [r7, #8]
}
 80041a8:	bf00      	nop
 80041aa:	e7fe      	b.n	80041aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	1e5a      	subs	r2, r3, #1
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d02c      	beq.n	800421c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d128      	bne.n	800421c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fcb2 	bl	8002b38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <xTaskPriorityDisinherit+0xd4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d903      	bls.n	80041fc <xTaskPriorityDisinherit+0xa4>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	4a0c      	ldr	r2, [pc, #48]	; (800422c <xTaskPriorityDisinherit+0xd4>)
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4a09      	ldr	r2, [pc, #36]	; (8004230 <xTaskPriorityDisinherit+0xd8>)
 800420a:	441a      	add	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f7fe fc35 	bl	8002a82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800421c:	697b      	ldr	r3, [r7, #20]
	}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000890 	.word	0x20000890
 800422c:	20000d6c 	.word	0x20000d6c
 8004230:	20000894 	.word	0x20000894

08004234 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800423e:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004244:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fc74 	bl	8002b38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d10a      	bne.n	800426e <prvAddCurrentTaskToDelayedList+0x3a>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800425e:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3304      	adds	r3, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4819      	ldr	r0, [pc, #100]	; (80042cc <prvAddCurrentTaskToDelayedList+0x98>)
 8004268:	f7fe fc0b 	bl	8002a82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800426c:	e026      	b.n	80042bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	429a      	cmp	r2, r3
 8004284:	d209      	bcs.n	800429a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004286:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7fe fc18 	bl	8002ac8 <vListInsert>
}
 8004298:	e010      	b.n	80042bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f7fe fc0e 	bl	8002ac8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d202      	bcs.n	80042bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042b6:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6013      	str	r3, [r2, #0]
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000d68 	.word	0x20000d68
 80042c8:	20000890 	.word	0x20000890
 80042cc:	20000d50 	.word	0x20000d50
 80042d0:	20000d20 	.word	0x20000d20
 80042d4:	20000d1c 	.word	0x20000d1c
 80042d8:	20000d84 	.word	0x20000d84

080042dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042e6:	f000 facb 	bl	8004880 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042ea:	4b1c      	ldr	r3, [pc, #112]	; (800435c <xTimerCreateTimerTask+0x80>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d021      	beq.n	8004336 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042fa:	1d3a      	adds	r2, r7, #4
 80042fc:	f107 0108 	add.w	r1, r7, #8
 8004300:	f107 030c 	add.w	r3, r7, #12
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fb77 	bl	80029f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	9202      	str	r2, [sp, #8]
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	2302      	movs	r3, #2
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2300      	movs	r3, #0
 800431a:	460a      	mov	r2, r1
 800431c:	4910      	ldr	r1, [pc, #64]	; (8004360 <xTimerCreateTimerTask+0x84>)
 800431e:	4811      	ldr	r0, [pc, #68]	; (8004364 <xTimerCreateTimerTask+0x88>)
 8004320:	f7ff f918 	bl	8003554 <xTaskCreateStatic>
 8004324:	4603      	mov	r3, r0
 8004326:	4a10      	ldr	r2, [pc, #64]	; (8004368 <xTimerCreateTimerTask+0x8c>)
 8004328:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <xTimerCreateTimerTask+0x8c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004332:	2301      	movs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	613b      	str	r3, [r7, #16]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004352:	697b      	ldr	r3, [r7, #20]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000dc0 	.word	0x20000dc0
 8004360:	08005138 	.word	0x08005138
 8004364:	08004489 	.word	0x08004489
 8004368:	20000dc4 	.word	0x20000dc4

0800436c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800437a:	2300      	movs	r3, #0
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <xTimerGenericCommand+0x98>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02a      	beq.n	80043f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b05      	cmp	r3, #5
 80043b2:	dc18      	bgt.n	80043e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043b4:	f7ff feb2 	bl	800411c <xTaskGetSchedulerState>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d109      	bne.n	80043d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043be:	4b11      	ldr	r3, [pc, #68]	; (8004404 <xTimerGenericCommand+0x98>)
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	f107 0110 	add.w	r1, r7, #16
 80043c6:	2300      	movs	r3, #0
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	f7fe fce1 	bl	8002d90 <xQueueGenericSend>
 80043ce:	6278      	str	r0, [r7, #36]	; 0x24
 80043d0:	e012      	b.n	80043f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <xTimerGenericCommand+0x98>)
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f107 0110 	add.w	r1, r7, #16
 80043da:	2300      	movs	r3, #0
 80043dc:	2200      	movs	r2, #0
 80043de:	f7fe fcd7 	bl	8002d90 <xQueueGenericSend>
 80043e2:	6278      	str	r0, [r7, #36]	; 0x24
 80043e4:	e008      	b.n	80043f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <xTimerGenericCommand+0x98>)
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	f107 0110 	add.w	r1, r7, #16
 80043ee:	2300      	movs	r3, #0
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	f7fe fdcb 	bl	8002f8c <xQueueGenericSendFromISR>
 80043f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3728      	adds	r7, #40	; 0x28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000dc0 	.word	0x20000dc0

08004408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004412:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <prvProcessExpiredTimer+0x7c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	3304      	adds	r3, #4
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe fb89 	bl	8002b38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d122      	bne.n	8004474 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	18d1      	adds	r1, r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	6978      	ldr	r0, [r7, #20]
 800443c:	f000 f8c8 	bl	80045d0 <prvInsertTimerInActiveList>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d016      	beq.n	8004474 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004446:	2300      	movs	r3, #0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2300      	movs	r3, #0
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	2100      	movs	r1, #0
 8004450:	6978      	ldr	r0, [r7, #20]
 8004452:	f7ff ff8b 	bl	800436c <xTimerGenericCommand>
 8004456:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	60fb      	str	r3, [r7, #12]
}
 8004470:	bf00      	nop
 8004472:	e7fe      	b.n	8004472 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	4798      	blx	r3
}
 800447c:	bf00      	nop
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000db8 	.word	0x20000db8

08004488 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004490:	f107 0308 	add.w	r3, r7, #8
 8004494:	4618      	mov	r0, r3
 8004496:	f000 f857 	bl	8004548 <prvGetNextExpireTime>
 800449a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f803 	bl	80044ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044a6:	f000 f8d5 	bl	8004654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044aa:	e7f1      	b.n	8004490 <prvTimerTask+0x8>

080044ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044b6:	f7ff fa4b 	bl	8003950 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f866 	bl	8004590 <prvSampleTimeNow>
 80044c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d130      	bne.n	800452e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <prvProcessTimerOrBlockTask+0x3c>
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d806      	bhi.n	80044e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044da:	f7ff fa47 	bl	800396c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff ff91 	bl	8004408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80044e6:	e024      	b.n	8004532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <prvProcessTimerOrBlockTask+0x90>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <prvProcessTimerOrBlockTask+0x94>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	f7fe ffed 	bl	80034ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004512:	f7ff fa2b 	bl	800396c <xTaskResumeAll>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <prvProcessTimerOrBlockTask+0x98>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
}
 800452c:	e001      	b.n	8004532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800452e:	f7ff fa1d 	bl	800396c <xTaskResumeAll>
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000dbc 	.word	0x20000dbc
 8004540:	20000dc0 	.word	0x20000dc0
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <prvGetNextExpireTime+0x44>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d105      	bne.n	800457a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <prvGetNextExpireTime+0x44>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e001      	b.n	800457e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000db8 	.word	0x20000db8

08004590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004598:	f7ff fa86 	bl	8003aa8 <xTaskGetTickCount>
 800459c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <prvSampleTimeNow+0x3c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d205      	bcs.n	80045b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045a8:	f000 f908 	bl	80047bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e002      	b.n	80045ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045ba:	4a04      	ldr	r2, [pc, #16]	; (80045cc <prvSampleTimeNow+0x3c>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045c0:	68fb      	ldr	r3, [r7, #12]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000dc8 	.word	0x20000dc8

080045d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d812      	bhi.n	800461c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e01b      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <prvInsertTimerInActiveList+0x7c>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3304      	adds	r3, #4
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7fe fa57 	bl	8002ac8 <vListInsert>
 800461a:	e012      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d206      	bcs.n	8004632 <prvInsertTimerInActiveList+0x62>
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e007      	b.n	8004642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004632:	4b07      	ldr	r3, [pc, #28]	; (8004650 <prvInsertTimerInActiveList+0x80>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fe fa43 	bl	8002ac8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004642:	697b      	ldr	r3, [r7, #20]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000dbc 	.word	0x20000dbc
 8004650:	20000db8 	.word	0x20000db8

08004654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08e      	sub	sp, #56	; 0x38
 8004658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800465a:	e09d      	b.n	8004798 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	da18      	bge.n	8004694 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	3304      	adds	r3, #4
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	61fb      	str	r3, [r7, #28]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468a:	6850      	ldr	r0, [r2, #4]
 800468c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	4611      	mov	r1, r2
 8004692:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	db7d      	blt.n	8004796 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	3304      	adds	r3, #4
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fa44 	bl	8002b38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046b0:	463b      	mov	r3, r7
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff6c 	bl	8004590 <prvSampleTimeNow>
 80046b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b09      	cmp	r3, #9
 80046be:	d86b      	bhi.n	8004798 <prvProcessReceivedCommands+0x144>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <prvProcessReceivedCommands+0x74>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046f1 	.word	0x080046f1
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	080046f1 	.word	0x080046f1
 80046d4:	08004799 	.word	0x08004799
 80046d8:	0800474d 	.word	0x0800474d
 80046dc:	08004785 	.word	0x08004785
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	080046f1 	.word	0x080046f1
 80046e8:	08004799 	.word	0x08004799
 80046ec:	0800474d 	.word	0x0800474d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	18d1      	adds	r1, r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fe:	f7ff ff67 	bl	80045d0 <prvInsertTimerInActiveList>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d047      	beq.n	8004798 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800470e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d13f      	bne.n	8004798 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	441a      	add	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2300      	movs	r3, #0
 8004726:	2100      	movs	r1, #0
 8004728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472a:	f7ff fe1f 	bl	800436c <xTimerGenericCommand>
 800472e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d130      	bne.n	8004798 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	61bb      	str	r3, [r7, #24]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	617b      	str	r3, [r7, #20]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	18d1      	adds	r1, r2, r3
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800477e:	f7ff ff27 	bl	80045d0 <prvInsertTimerInActiveList>
					break;
 8004782:	e009      	b.n	8004798 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d104      	bne.n	8004798 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800478e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004790:	f000 fb68 	bl	8004e64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004794:	e000      	b.n	8004798 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004796:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <prvProcessReceivedCommands+0x164>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	1d39      	adds	r1, r7, #4
 800479e:	2200      	movs	r2, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fe fc8b 	bl	80030bc <xQueueReceive>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f47f af57 	bne.w	800465c <prvProcessReceivedCommands+0x8>
	}
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	3730      	adds	r7, #48	; 0x30
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000dc0 	.word	0x20000dc0

080047bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047c2:	e045      	b.n	8004850 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047c4:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <prvSwitchTimerLists+0xbc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047ce:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <prvSwitchTimerLists+0xbc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3304      	adds	r3, #4
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe f9ab 	bl	8002b38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d12e      	bne.n	8004850 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4413      	add	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	429a      	cmp	r2, r3
 8004802:	d90e      	bls.n	8004822 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <prvSwitchTimerLists+0xbc>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3304      	adds	r3, #4
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7fe f954 	bl	8002ac8 <vListInsert>
 8004820:	e016      	b.n	8004850 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004822:	2300      	movs	r3, #0
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	2300      	movs	r3, #0
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	2100      	movs	r1, #0
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff fd9d 	bl	800436c <xTimerGenericCommand>
 8004832:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <prvSwitchTimerLists+0x94>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	603b      	str	r3, [r7, #0]
}
 800484c:	bf00      	nop
 800484e:	e7fe      	b.n	800484e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <prvSwitchTimerLists+0xbc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1b4      	bne.n	80047c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <prvSwitchTimerLists+0xbc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <prvSwitchTimerLists+0xc0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a04      	ldr	r2, [pc, #16]	; (8004878 <prvSwitchTimerLists+0xbc>)
 8004866:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004868:	4a04      	ldr	r2, [pc, #16]	; (800487c <prvSwitchTimerLists+0xc0>)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6013      	str	r3, [r2, #0]
}
 800486e:	bf00      	nop
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000db8 	.word	0x20000db8
 800487c:	20000dbc 	.word	0x20000dbc

08004880 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004886:	f000 f929 	bl	8004adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <prvCheckForValidListAndQueue+0x60>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d120      	bne.n	80048d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004892:	4814      	ldr	r0, [pc, #80]	; (80048e4 <prvCheckForValidListAndQueue+0x64>)
 8004894:	f7fe f8ca 	bl	8002a2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004898:	4813      	ldr	r0, [pc, #76]	; (80048e8 <prvCheckForValidListAndQueue+0x68>)
 800489a:	f7fe f8c7 	bl	8002a2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <prvCheckForValidListAndQueue+0x6c>)
 80048a0:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <prvCheckForValidListAndQueue+0x64>)
 80048a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80048a4:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <prvCheckForValidListAndQueue+0x70>)
 80048a6:	4a10      	ldr	r2, [pc, #64]	; (80048e8 <prvCheckForValidListAndQueue+0x68>)
 80048a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80048aa:	2300      	movs	r3, #0
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <prvCheckForValidListAndQueue+0x74>)
 80048b0:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <prvCheckForValidListAndQueue+0x78>)
 80048b2:	2110      	movs	r1, #16
 80048b4:	200a      	movs	r0, #10
 80048b6:	f7fe f9d1 	bl	8002c5c <xQueueGenericCreateStatic>
 80048ba:	4603      	mov	r3, r0
 80048bc:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <prvCheckForValidListAndQueue+0x60>)
 80048be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <prvCheckForValidListAndQueue+0x60>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <prvCheckForValidListAndQueue+0x60>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	490b      	ldr	r1, [pc, #44]	; (80048fc <prvCheckForValidListAndQueue+0x7c>)
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fde4 	bl	800349c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d4:	f000 f932 	bl	8004b3c <vPortExitCritical>
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000dc0 	.word	0x20000dc0
 80048e4:	20000d90 	.word	0x20000d90
 80048e8:	20000da4 	.word	0x20000da4
 80048ec:	20000db8 	.word	0x20000db8
 80048f0:	20000dbc 	.word	0x20000dbc
 80048f4:	20000e6c 	.word	0x20000e6c
 80048f8:	20000dcc 	.word	0x20000dcc
 80048fc:	08005140 	.word	0x08005140

08004900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b04      	subs	r3, #4
 8004910:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3b04      	subs	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b04      	subs	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <pxPortInitialiseStack+0x54>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3b14      	subs	r3, #20
 800493a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b20      	subs	r3, #32
 8004946:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004948:	68fb      	ldr	r3, [r7, #12]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr
 8004954:	08004959 	.word	0x08004959

08004958 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800495e:	2300      	movs	r3, #0
 8004960:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <prvTaskExitError+0x54>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d00a      	beq.n	8004982 <prvTaskExitError+0x2a>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60fb      	str	r3, [r7, #12]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <prvTaskExitError+0x28>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	60bb      	str	r3, [r7, #8]
}
 8004994:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004996:	bf00      	nop
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0fc      	beq.n	8004998 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20000014 	.word	0x20000014

080049b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <pxCurrentTCBConst2>)
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	6808      	ldr	r0, [r1, #0]
 80049b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049ba:	f380 8809 	msr	PSP, r0
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f04f 0000 	mov.w	r0, #0
 80049c6:	f380 8811 	msr	BASEPRI, r0
 80049ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80049ce:	4770      	bx	lr

080049d0 <pxCurrentTCBConst2>:
 80049d0:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop

080049d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80049d8:	4806      	ldr	r0, [pc, #24]	; (80049f4 <prvPortStartFirstTask+0x1c>)
 80049da:	6800      	ldr	r0, [r0, #0]
 80049dc:	6800      	ldr	r0, [r0, #0]
 80049de:	f380 8808 	msr	MSP, r0
 80049e2:	b662      	cpsie	i
 80049e4:	b661      	cpsie	f
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	df00      	svc	0
 80049f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049f2:	bf00      	nop
 80049f4:	e000ed08 	.word	0xe000ed08

080049f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049fe:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <xPortStartScheduler+0xd0>)
 8004a00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	22ff      	movs	r2, #255	; 0xff
 8004a0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <xPortStartScheduler+0xd4>)
 8004a24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a26:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <xPortStartScheduler+0xd8>)
 8004a28:	2207      	movs	r2, #7
 8004a2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a2c:	e009      	b.n	8004a42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a2e:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <xPortStartScheduler+0xd8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	4a26      	ldr	r2, [pc, #152]	; (8004ad0 <xPortStartScheduler+0xd8>)
 8004a36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d0ef      	beq.n	8004a2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <xPortStartScheduler+0xd8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f1c3 0307 	rsb	r3, r3, #7
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d00a      	beq.n	8004a70 <xPortStartScheduler+0x78>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60bb      	str	r3, [r7, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <xPortStartScheduler+0xd8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <xPortStartScheduler+0xd8>)
 8004a78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <xPortStartScheduler+0xd8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <xPortStartScheduler+0xd8>)
 8004a84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <xPortStartScheduler+0xdc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <xPortStartScheduler+0xdc>)
 8004a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <xPortStartScheduler+0xdc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <xPortStartScheduler+0xdc>)
 8004aa0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004aa4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004aa6:	f000 f8b9 	bl	8004c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <xPortStartScheduler+0xe0>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ab0:	f7ff ff92 	bl	80049d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ab4:	f7ff f8c4 	bl	8003c40 <vTaskSwitchContext>
	prvTaskExitError();
 8004ab8:	f7ff ff4e 	bl	8004958 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	e000e400 	.word	0xe000e400
 8004acc:	20000ebc 	.word	0x20000ebc
 8004ad0:	20000ec0 	.word	0x20000ec0
 8004ad4:	e000ed20 	.word	0xe000ed20
 8004ad8:	20000014 	.word	0x20000014

08004adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	607b      	str	r3, [r7, #4]
}
 8004af4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004af6:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <vPortEnterCritical+0x58>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3301      	adds	r3, #1
 8004afc:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <vPortEnterCritical+0x58>)
 8004afe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <vPortEnterCritical+0x58>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10f      	bne.n	8004b28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <vPortEnterCritical+0x5c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	603b      	str	r3, [r7, #0]
}
 8004b24:	bf00      	nop
 8004b26:	e7fe      	b.n	8004b26 <vPortEnterCritical+0x4a>
	}
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000014 	.word	0x20000014
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b42:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <vPortExitCritical+0x4c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <vPortExitCritical+0x24>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	607b      	str	r3, [r7, #4]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b60:	4b09      	ldr	r3, [pc, #36]	; (8004b88 <vPortExitCritical+0x4c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <vPortExitCritical+0x4c>)
 8004b68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <vPortExitCritical+0x4c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d105      	bne.n	8004b7e <vPortExitCritical+0x42>
 8004b72:	2300      	movs	r3, #0
 8004b74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f383 8811 	msr	BASEPRI, r3
}
 8004b7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	20000014 	.word	0x20000014
 8004b8c:	00000000 	.word	0x00000000

08004b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b90:	f3ef 8009 	mrs	r0, PSP
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <pxCurrentTCBConst>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ba0:	6010      	str	r0, [r2, #0]
 8004ba2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ba6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004baa:	f380 8811 	msr	BASEPRI, r0
 8004bae:	f7ff f847 	bl	8003c40 <vTaskSwitchContext>
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	6808      	ldr	r0, [r1, #0]
 8004bc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bc6:	f380 8809 	msr	PSP, r0
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	4770      	bx	lr

08004bd0 <pxCurrentTCBConst>:
 8004bd0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop

08004bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	607b      	str	r3, [r7, #4]
}
 8004bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bf2:	f7fe ff67 	bl	8003ac4 <xTaskIncrementTick>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <SysTick_Handler+0x40>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	2300      	movs	r3, #0
 8004c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f383 8811 	msr	BASEPRI, r3
}
 8004c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <vPortSetupTimerInterrupt+0x30>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <vPortSetupTimerInterrupt+0x34>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c2c:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <vPortSetupTimerInterrupt+0x38>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <vPortSetupTimerInterrupt+0x3c>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	099b      	lsrs	r3, r3, #6
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <vPortSetupTimerInterrupt+0x40>)
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c3e:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <vPortSetupTimerInterrupt+0x30>)
 8004c40:	2207      	movs	r2, #7
 8004c42:	601a      	str	r2, [r3, #0]
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	e000e010 	.word	0xe000e010
 8004c50:	e000e018 	.word	0xe000e018
 8004c54:	20000008 	.word	0x20000008
 8004c58:	10624dd3 	.word	0x10624dd3
 8004c5c:	e000e014 	.word	0xe000e014

08004c60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c66:	f3ef 8305 	mrs	r3, IPSR
 8004c6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b0f      	cmp	r3, #15
 8004c70:	d914      	bls.n	8004c9c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <vPortValidateInterruptPriority+0x6c>)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c7c:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <vPortValidateInterruptPriority+0x70>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	7afa      	ldrb	r2, [r7, #11]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d20a      	bcs.n	8004c9c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	607b      	str	r3, [r7, #4]
}
 8004c98:	bf00      	nop
 8004c9a:	e7fe      	b.n	8004c9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <vPortValidateInterruptPriority+0x74>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <vPortValidateInterruptPriority+0x78>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d90a      	bls.n	8004cc2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	603b      	str	r3, [r7, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <vPortValidateInterruptPriority+0x60>
	}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	e000e3f0 	.word	0xe000e3f0
 8004cd0:	20000ebc 	.word	0x20000ebc
 8004cd4:	e000ed0c 	.word	0xe000ed0c
 8004cd8:	20000ec0 	.word	0x20000ec0

08004cdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	; 0x28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ce8:	f7fe fe32 	bl	8003950 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cec:	4b58      	ldr	r3, [pc, #352]	; (8004e50 <pvPortMalloc+0x174>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cf4:	f000 f910 	bl	8004f18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cf8:	4b56      	ldr	r3, [pc, #344]	; (8004e54 <pvPortMalloc+0x178>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 808e 	bne.w	8004e22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01d      	beq.n	8004d48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4413      	add	r3, r2
 8004d12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d014      	beq.n	8004d48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f023 0307 	bic.w	r3, r3, #7
 8004d24:	3308      	adds	r3, #8
 8004d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <pvPortMalloc+0x6c>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	617b      	str	r3, [r7, #20]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d069      	beq.n	8004e22 <pvPortMalloc+0x146>
 8004d4e:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <pvPortMalloc+0x17c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d864      	bhi.n	8004e22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d58:	4b40      	ldr	r3, [pc, #256]	; (8004e5c <pvPortMalloc+0x180>)
 8004d5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d5c:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <pvPortMalloc+0x180>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d62:	e004      	b.n	8004d6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d903      	bls.n	8004d80 <pvPortMalloc+0xa4>
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f1      	bne.n	8004d64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d80:	4b33      	ldr	r3, [pc, #204]	; (8004e50 <pvPortMalloc+0x174>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d04b      	beq.n	8004e22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2208      	movs	r2, #8
 8004d90:	4413      	add	r3, r2
 8004d92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	1ad2      	subs	r2, r2, r3
 8004da4:	2308      	movs	r3, #8
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d91f      	bls.n	8004dec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <pvPortMalloc+0xf8>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	613b      	str	r3, [r7, #16]
}
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004de6:	69b8      	ldr	r0, [r7, #24]
 8004de8:	f000 f8f8 	bl	8004fdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dec:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <pvPortMalloc+0x17c>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <pvPortMalloc+0x17c>)
 8004df8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dfa:	4b17      	ldr	r3, [pc, #92]	; (8004e58 <pvPortMalloc+0x17c>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <pvPortMalloc+0x184>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d203      	bcs.n	8004e0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <pvPortMalloc+0x17c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a15      	ldr	r2, [pc, #84]	; (8004e60 <pvPortMalloc+0x184>)
 8004e0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <pvPortMalloc+0x178>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e22:	f7fe fda3 	bl	800396c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <pvPortMalloc+0x16a>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <pvPortMalloc+0x168>
	return pvReturn;
 8004e46:	69fb      	ldr	r3, [r7, #28]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3728      	adds	r7, #40	; 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20001acc 	.word	0x20001acc
 8004e54:	20001ad8 	.word	0x20001ad8
 8004e58:	20001ad0 	.word	0x20001ad0
 8004e5c:	20001ac4 	.word	0x20001ac4
 8004e60:	20001ad4 	.word	0x20001ad4

08004e64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d048      	beq.n	8004f08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e76:	2308      	movs	r3, #8
 8004e78:	425b      	negs	r3, r3
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <vPortFree+0xac>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <vPortFree+0x44>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <vPortFree+0x62>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60bb      	str	r3, [r7, #8]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <vPortFree+0xac>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d019      	beq.n	8004f08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d115      	bne.n	8004f08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <vPortFree+0xac>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004eec:	f7fe fd30 	bl	8003950 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <vPortFree+0xb0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4413      	add	r3, r2
 8004efa:	4a06      	ldr	r2, [pc, #24]	; (8004f14 <vPortFree+0xb0>)
 8004efc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004efe:	6938      	ldr	r0, [r7, #16]
 8004f00:	f000 f86c 	bl	8004fdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f04:	f7fe fd32 	bl	800396c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20001ad8 	.word	0x20001ad8
 8004f14:	20001ad0 	.word	0x20001ad0

08004f18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <prvHeapInit+0xac>)
 8004f26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3307      	adds	r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0307 	bic.w	r3, r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	4a1f      	ldr	r2, [pc, #124]	; (8004fc4 <prvHeapInit+0xac>)
 8004f48:	4413      	add	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <prvHeapInit+0xb0>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f56:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <prvHeapInit+0xb0>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4413      	add	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f64:	2208      	movs	r2, #8
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0307 	bic.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <prvHeapInit+0xb4>)
 8004f78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <prvHeapInit+0xb4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <prvHeapInit+0xb4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	1ad2      	subs	r2, r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f98:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <prvHeapInit+0xb4>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4a0a      	ldr	r2, [pc, #40]	; (8004fd0 <prvHeapInit+0xb8>)
 8004fa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <prvHeapInit+0xbc>)
 8004fae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <prvHeapInit+0xc0>)
 8004fb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000ec4 	.word	0x20000ec4
 8004fc8:	20001ac4 	.word	0x20001ac4
 8004fcc:	20001acc 	.word	0x20001acc
 8004fd0:	20001ad4 	.word	0x20001ad4
 8004fd4:	20001ad0 	.word	0x20001ad0
 8004fd8:	20001ad8 	.word	0x20001ad8

08004fdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fe4:	4b27      	ldr	r3, [pc, #156]	; (8005084 <prvInsertBlockIntoFreeList+0xa8>)
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e002      	b.n	8004ff0 <prvInsertBlockIntoFreeList+0x14>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d8f7      	bhi.n	8004fea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	4413      	add	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d108      	bne.n	800501e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	441a      	add	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d118      	bne.n	8005064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b14      	ldr	r3, [pc, #80]	; (8005088 <prvInsertBlockIntoFreeList+0xac>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d00d      	beq.n	800505a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	441a      	add	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e008      	b.n	800506c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <prvInsertBlockIntoFreeList+0xac>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	e003      	b.n	800506c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d002      	beq.n	800507a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr
 8005084:	20001ac4 	.word	0x20001ac4
 8005088:	20001acc 	.word	0x20001acc

0800508c <__libc_init_array>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	2600      	movs	r6, #0
 8005090:	4d0c      	ldr	r5, [pc, #48]	; (80050c4 <__libc_init_array+0x38>)
 8005092:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <__libc_init_array+0x3c>)
 8005094:	1b64      	subs	r4, r4, r5
 8005096:	10a4      	asrs	r4, r4, #2
 8005098:	42a6      	cmp	r6, r4
 800509a:	d109      	bne.n	80050b0 <__libc_init_array+0x24>
 800509c:	f000 f830 	bl	8005100 <_init>
 80050a0:	2600      	movs	r6, #0
 80050a2:	4d0a      	ldr	r5, [pc, #40]	; (80050cc <__libc_init_array+0x40>)
 80050a4:	4c0a      	ldr	r4, [pc, #40]	; (80050d0 <__libc_init_array+0x44>)
 80050a6:	1b64      	subs	r4, r4, r5
 80050a8:	10a4      	asrs	r4, r4, #2
 80050aa:	42a6      	cmp	r6, r4
 80050ac:	d105      	bne.n	80050ba <__libc_init_array+0x2e>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b4:	4798      	blx	r3
 80050b6:	3601      	adds	r6, #1
 80050b8:	e7ee      	b.n	8005098 <__libc_init_array+0xc>
 80050ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80050be:	4798      	blx	r3
 80050c0:	3601      	adds	r6, #1
 80050c2:	e7f2      	b.n	80050aa <__libc_init_array+0x1e>
 80050c4:	080051bc 	.word	0x080051bc
 80050c8:	080051bc 	.word	0x080051bc
 80050cc:	080051bc 	.word	0x080051bc
 80050d0:	080051c0 	.word	0x080051c0

080050d4 <memcpy>:
 80050d4:	440a      	add	r2, r1
 80050d6:	4291      	cmp	r1, r2
 80050d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050dc:	d100      	bne.n	80050e0 <memcpy+0xc>
 80050de:	4770      	bx	lr
 80050e0:	b510      	push	{r4, lr}
 80050e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050e6:	4291      	cmp	r1, r2
 80050e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ec:	d1f9      	bne.n	80050e2 <memcpy+0xe>
 80050ee:	bd10      	pop	{r4, pc}

080050f0 <memset>:
 80050f0:	4603      	mov	r3, r0
 80050f2:	4402      	add	r2, r0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d100      	bne.n	80050fa <memset+0xa>
 80050f8:	4770      	bx	lr
 80050fa:	f803 1b01 	strb.w	r1, [r3], #1
 80050fe:	e7f9      	b.n	80050f4 <memset+0x4>

08005100 <_init>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	bf00      	nop
 8005104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005106:	bc08      	pop	{r3}
 8005108:	469e      	mov	lr, r3
 800510a:	4770      	bx	lr

0800510c <_fini>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr
